@INPROCEEDINGS{4417219, 
author={Jiri Zdenek}, 
booktitle={2007 European Conference on Power Electronics and Applications}, 
title={Efficient scheduler-dispatcher software architecture of the spacepower facility distributed control computer}, 
year={2007}, 
pages={1-10}, 
abstract={The system software architecture of the distributed control computer (computer network) of the mechatronic scientific facility (crystallizer) for automatic high temperature material processing in a orbital space station in micro-gravitation environment is presented in this paper. The scientific facility consists of the multi-zone high temperature furnace with heating system, PWM controlled heating converters, the precise extra low speed vibration-less electric drives to make possible to manipulate the processed material samples during experiments, very precise temperature measurement module, telemetric channel, crew interface computer, free programmable central controller and several further units. Facility computer network nodes have many user tasks (processes) divided into many threads running in real time environment. Using preemptive real time operating system tends to have unacceptable high overhead therefore the system of table driven coroutines with low system resource requirement (overhead, stack space) was designed. Emphasis is given on the design of efficient, reliable and self documented scheduler-dispatcher of the user tasks with minimized overhead and easily extensible descriptors of table driven user finite state automata. Presented scheduler architecture is used in the distributed network control computer of newly designed facility (Advanced TITUS) intended to be placed in the ISS space station. It is advanced version of the proved software utilized in the distributed control computer of the TITUS scientific equipment which was successfully operated several years in the MIR orbital station especially during ESA missions EUROMIR.}, 
keywords={aerospace computing;aerospace control;aerospace instrumentation;computer networks;crystallisers;distributed control;electric furnaces;finite state machines;mechatronics;PWM controlled heating converters;TITUS scientific equipment;automatic high temperature material processing;crew interface computer;crystallizer;distributed control computer;distributed network control computer;facility computer network nodes;finite state automata;free programmable central controller;heating system;high temperature furnace;mechatronic scientific facility;microgravitation environment;orbital space station;real time operating system;scheduler-dispatcher software architecture;space power facility;telemetric channel;temperature measurement module;vibrationless electric drives;Automatic control;Centralized control;Computer architecture;Computer networks;Distributed computing;Distributed control;Processor scheduling;Resistance heating;Software architecture;Space stations;Measurement;Mechatronics;Real time processing;Software;Space}, 
doi={10.1109/EPE.2007.4417219}, 
month={Sept},}
@INPROCEEDINGS{6059016, 
author={R. Inam and J. Mäki-Turja and M. Sjödin and S. M. H. Ashjaei and S. Afshar}, 
booktitle={ETFA2011}, 
title={Support for hierarchical scheduling in FreeRTOS}, 
year={2011}, 
pages={1-10}, 
abstract={This paper presents the implementation of a Hierarchical Scheduling Framework (HSF) on an open source real-time operating system (FreeRTOS) to support the temporal isolation between a number of applications, on a single processor. The goal is to achieve predictable integration and reusability of independently developed components or applications. We present the initial results of the HSF implementation by running it on an AVR 32-bit board EVK1100. The paper addresses the fixed-priority preemptive scheduling at both global and local scheduling levels. It describes the detailed design of HSF with the emphasis of doing minimal changes to the underlying FreeRTOS kernel and keeping its API intact. Finally it provides (and compares) the results for the performance measures of idling and deferrable servers with respect to the overhead of the implementation.}, 
keywords={application program interfaces;object-oriented programming;operating system kernels;public domain software;real-time systems;scheduling;software reusability;API;AVR EVK1100;FreeRTOS kernel;application reusability;fixed-priority preemptive scheduling;global scheduling levels;hierarchical scheduling framework;independently developed component reusability;local scheduling levels;open source real-time operating system;predictable integration;single processor;temporal isolation;Job shop scheduling;Kernel;Processor scheduling;Real time systems;Schedules;Servers;fixed-priority scheduling;hierarchical scheduling framework;real-time systems}, 
doi={10.1109/ETFA.2011.6059016}, 
ISSN={1946-0740}, 
month={Sept},}
@INPROCEEDINGS{7515633, 
author={D. P. B. Renaux and F. Pöttker and C. E. Soares and C. C. Valério}, 
booktitle={2016 IEEE 19th International Symposium on Real-Time Distributed Computing (ISORC)}, 
title={A State-Based Function-Queue Software Architecture for Electric Motor Control}, 
year={2016}, 
pages={229-236}, 
abstract={Increasing demands on functional and temporal requirements for the software in electric motor controllers demand for solutions that are efficient in time and space usage while providing the required functionality. Embedded software for electric motor control must deal with the control itself, and with operation, protection, supervision, safety, and user interfaces. Concerning this need, an embedded software multitasking architecture that combines the concept of function queues and of state-based code is proposed and compared to a standard implementation based on an RTOS. In the proposed solution, the queue of function pointers is partitioned into several shorter queues each one active in a given state of the system, thus, reducing queue management overhead.}, 
keywords={control engineering computing;embedded systems;machine control;software architecture;RTOS;electric motor control;embedded software multitasking architecture;function pointer queue;queue management;state-based code;state-based function-queue software architecture;user interfaces;Computer architecture;Electric motors;Embedded software;Motor drives;Multitasking;Real-time systems;Electrical Motor Control;Embedded Software Multitasking Architecture;Real-Time Embedded Software;Task Scheduling}, 
doi={10.1109/ISORC.2016.39}, 
month={May},}
@ARTICLE{5710575, 
author={W. Liu and J. Xu and J. K. Muppala and W. Zhang and X. Wu and Y. Ye}, 
journal={IEEE Embedded Systems Letters}, 
title={Coroutine-Based Synthesis of Efficient Embedded Software From SystemC Models}, 
year={2011}, 
volume={3}, 
number={1}, 
pages={46-49}, 
abstract={SystemC is a widely used electronic system-level (ESL) design language that can be used to model both hardware and software at different stages of system design. There has been a lot of research on behavior synthesis of hardware from SystemC, but relatively little work on synthesizing embedded software for SystemC designs. In this letter, we present an approach to automatic software synthesis from SystemC-based on coroutines instead of the traditional approaches based on real-time operating system (RTOS) threads. Performance evaluation results on some realistic applications show that our approach results in impressive reduction of runtime overheads compared to the thread-based approaches.}, 
keywords={C++ language;embedded systems;operating systems (computers);SystemC models;coroutine-based synthesis;electronic system-level design language;embedded software synthesis;real-time operating system threads;Context;Instruction sets;Kernel;Prototypes;Switches;Synchronization;Performance;SystemC;software synthesis}, 
doi={10.1109/LES.2011.2112634}, 
ISSN={1943-0663}, 
month={March},}
@INPROCEEDINGS{6007780, 
author={S. P. Crago and D. I. Kang and M. Kang and R. Kost and K. Singh and J. Suh and J. P. Walters}, 
booktitle={2011 IEEE Fourth International Conference on Space Mission Challenges for Information Technology}, 
title={Programming Models and Development Software for a Space-Based Many-Core Processor}, 
year={2011}, 
pages={95-102}, 
abstract={The Maestro processor is a 49-core many-core processor for space based on the TILE64 architecture and implemented in rad-hard-by-design technology by Boeing. In this paper we discuss the programming models for Maestro, the implications of the programming model on fault tolerance and flight software, and the software development tools that have been developed for Maestro. The software described here is experimental development software that allows application and algorithm evaluation on the architecture, but we believe this software can be used as the basis for flight software. The software includes libraries, performance analysis and optimization tools, and compilers. While this work was done on the Maestro chip, the principles discussed can be applied to any multi-core or many-core processor.}, 
keywords={aerospace computing;computer architecture;microprocessor chips;multiprocessing systems;program compilers;program processors;software architecture;software fault tolerance;software libraries;software performance evaluation;49-core manycore processor;Maestro chip;Maestro processor;TILE64 architecture;fault tolerance;flight software;multicore processor;optimization tool;programming model;rad-hard-by-design technology;software compiler;software development tool;software library;space-based manycore processor;Computer architecture;Libraries;Linux;Message passing;Programming;Real time systems;Software;Multi-core programming;parallel software;space-based processing}, 
doi={10.1109/SMC-IT.2011.29}, 
month={Aug},}
@INPROCEEDINGS{7363616, 
author={S. Park and H. Kim and S. Y. Kang and C. H. Koo and H. Joe}, 
booktitle={2015 IEEE 13th International Conference on Embedded and Ubiquitous Computing}, 
title={Lua-Based Virtual Machine Platform for Spacecraft On-Board Control Software}, 
year={2015}, 
pages={44-51}, 
abstract={Mission critical embedded software for autonomous operation requires high development cost due to its long development cycle. One of the potential solutions for reducing the cost is to reuse the software developed at previous missions. Virtual machine platform such as JVM is a good example to provide code portability across various missions. Flight software in aerospace field is adopting this concept to improve reusability and eventually to reduce development cost. In this paper, we propose a Lua-based virtualization environment for spacecraft flight software. Flight software for spacecraft control consists of a few tasks that are highly autonomous. Lua is chosen as the script language for programming the control tasks. Though Lua was designed with simplicity and portability, it only supports multithreading with collaborative coroutines. To support preemptive multitasking, we implement time slicing coroutines as spacecraft control processes. New coroutine scheduler is devised and time slicing functionality is added into the scheduler. Scheduler locking and message passing with external flight software are also implemented. Instead of modifying the Lua interpreter, we have exploited the debug support APIs for our implementation. For evaluation, we have implemented the flight software virtualization environment on the flight computer. Accuracy of the time slicing scheduler is also analyzed.}, 
keywords={aerospace control;application program interfaces;authoring languages;control engineering computing;message passing;multi-threading;program debugging;scheduling;software portability;software reusability;space vehicles;spacecraft computers;virtual machines;virtualisation;JVM;Lua interpreter;Lua script language;Lua-based virtual machine platform;Lua-based virtualization environment;aerospace field;autonomous operation;code portability;collaborative coroutines;control task programming;coroutine scheduler;debug support API;development cost reduction;flight computer;flight software virtualization environment;highly autonomous task;message passing;mission critical embedded software;multithreading;preemptive multitasking;scheduler locking;software reuse;spacecraft control;spacecraft flight software;spacecraft on-board control software;time slicing coroutines;time slicing scheduler;Computers;Engines;Runtime;Software;Space vehicles;Virtual machining;Virtualization;Lua;OBCP;mission critical embedded software;reusability;spacecraft;virtual machine}, 
doi={10.1109/EUC.2015.21}, 
month={Oct},}
@INPROCEEDINGS{7383583, 
author={Z. Cheng and Y. Li and R. West}, 
booktitle={2015 IEEE Real-Time Systems Symposium}, 
title={Qduino: A Multithreaded Arduino System for Embedded Computing}, 
year={2015}, 
pages={261-272}, 
abstract={Arduino is an open source platform that offers a clear and simple environment for physical computing. It is now widely used in modern robotics and Internet of Things (IoT) applications, due in part to its low-cost, ease of programming, and rapid prototyping capabilities. Sensors and actuators can easily be connected to the analog and digital I/O pins of an Arduino device, which features an on-board microcontroller programmed using the Arduino API. The increasing complexity of physical computing applications has now led to a series of Arduino-compatible devices with faster processors, increased flash storage, larger memories and more complicated I/O architectures. The Intel Galileo, for example, is designed to support the Arduino API on top of a Linux system, code-named Clanton. However, the standard API is restricted to the capabilities found on less powerful devices, lacking support for multithreaded programs, or specification of real-time requirements. In this paper, we present Qduino, a system developed for Arduino compatible boards. Qduino provides an extended Arduino API which, while backward-compatible with the original API, supports real-time multithreaded sketches and event handling. Experiments show the performance gains of Qduino compared to Clanton Linux.}, 
keywords={Linux;application program interfaces;formal specification;multi-threading;public domain software;real-time systems;Arduino API;Arduino compatible boards;Arduino-compatible devices;Clanton;I/O architectures;Intel Galileo;Internet of Things applications;IoT applications;Linux system;Qduino;Quest real-time operating system;actuators;backward-compatibility;embedded computing;event handling;flash storage;multithreaded Arduino system;multithreaded programs;on-board microcontroller;open source platform;physical computing applications;programming;rapid prototyping capabilities;real-time multithreaded sketches;real-time requirement specification;robotics;sensors;Computer architecture;Hardware;Instruction sets;Kernel;Linux;Real-time systems;Standards;Arduino;embedded systems;multi-threading;real-time}, 
doi={10.1109/RTSS.2015.32}, 
ISSN={1052-8725}, 
month={Dec},}
@ARTICLE{6463378, 
author={S. Andalam and P. S. Roop and A. Girault and C. Traulsen}, 
journal={IEEE Transactions on Computers}, 
title={A Predictable Framework for Safety-Critical Embedded Systems}, 
year={2014}, 
volume={63}, 
number={7}, 
pages={1600-1612}, 
abstract={Safety-critical embedded systems, commonly found in automotive, space, and health-care, are highly reactive and concurrent. Their most important characteristics are that they require both functional and timing correctness. C has been the language of choice for programming such systems. However, C lacks many features that can make the design process of such systems seamless while also maintaining predictability. This paper addresses the need for a C-based design framework for achieving time predictability. To this end, we propose the PRET-C language and the ARPRET architecture. PRET-C offers a small set of extensions to a subset of C to facilitate effective concurrent programming. We present a new synchronous semantics for PRET-C. It guarantees that all PRET-C programs are deterministic, reactive, and provides thread-safe communication via shared memory access. This simplifies considerably the design of safety-critical systems. We also present the architecture of a precision timed machine (PRET) called ARPRET. It offers the ability to design time predictable architectures through simple customizations of soft-core processors. We have designed ARPRET particularly for efficient and predictable execution of PRET-C. We demonstrate through extensive benchmarking that PRET-C based system design excels in comparison to existing C-based paradigms. We also qualitatively compare our approach to the Berkeley-Columbia PRET approach. We have demonstrated that the proposed approach provides an ideal framework for designing and validating safety-critical embedded systems.}, 
keywords={C language;embedded systems;multi-threading;programming language semantics;safety-critical software;shared memory systems;ARPRET;ARPRET architecture;Berkeley-Columbia PRET approach;C-based design framework;PRET-C language;PRET-C programs;Precision Timed C language;architecture of a precision timed machine;concurrent programming;deterministic programs;lightweight multithreaded language;reactive programs;safety-critical embedded systems;shared memory access;soft-core processors;synchronous semantics;thread-safe communication;time predictable architectures;Computer architecture;Instruction sets;Programming;Real-time systems;Semantics;Timing;PRET;PRET-C;Safety-critical systems;WCET;WCRT;synchronous languages;time predictability}, 
doi={10.1109/TC.2013.28}, 
ISSN={0018-9340}, 
month={July},}
@INPROCEEDINGS{5210958, 
author={F. Oldewurtel and J. Riihijarvi and K. Rerkrai and P. Mahonen}, 
booktitle={2009 Third International Conference on Sensor Technologies and Applications}, 
title={The RUNES Architecture for Reconfigurable Embedded and Sensor Networks}, 
year={2009}, 
pages={109-116}, 
abstract={We present the RUNES architecture for reconfigurable embedded networked systems and wireless sensor networks. It is the first systems-level architecture for such networks to explicitly deal with heterogeneity in hardware platforms, link-layer technologies and networking protocols while offering a simple programming language independent set of APIs together with a component-oriented middleware for the application developers to work on. The solutions developed are particularly appropriate for use in various emergency response scenarios, in which reconfigurability is often a key requirement. We also report on an example realisation of our architecture in a prototypical demonstration environment in a particular emergency scenario. The evaluation of architectural aspects such as reconfigurability shows that great programming flexibility can be achieved at low implementation overhead. The experience gained from RUNES modular architecture are very promising both in academic and industry projects context.}, 
keywords={embedded systems;intelligent sensors;wireless sensor networks;RUNES architecture;reconfigurable embedded networked systems;wireless sensor networks;Actuators;Computer architecture;Hardware;Middleware;Operating systems;Protocols;Sensor systems;Sensor systems and applications;System testing;Wireless sensor networks;architecture;programming model;prototype;sensor networks;software platform}, 
doi={10.1109/SENSORCOMM.2009.26}, 
month={June},}
@INPROCEEDINGS{4624024, 
author={D. G. Kim and S. M. Lee and D. R. Shin}, 
booktitle={2008 Fourth International Conference on Networked Computing and Advanced Information Management}, 
title={Design of the Operating System Virtualization on L4 Microkernel}, 
year={2008}, 
volume={1}, 
pages={307-310}, 
abstract={The importance of the virtualization in embedded computing area is currently emerging. The virtualization can enhance system flexibility by enabling the concurrent execution of an application OS and a real-time OS (RTOS) on the same processor. L4 microkernel can be used as an efficient hypervisor which provides environment for operating systems virtualization. In order to run the application OSes on L4 microkernel, the application OSes should be adapted. The source code of Linux kernel can be readily accessed and modified. Hence, the Linux kernel is chosen as virtualized operating systems. In this paper, the architecture for virtualization of Linux kernel which is based on L4 microkernel is proposed.}, 
keywords={Linux;operating system kernels;virtual machines;L4 microkernel;Linux kernel virtualization;concurrent execution;embedded computing;hypervisor;operating system virtualization;real-time operating system;system flexibility;Application software;Application virtualization;Embedded computing;Kernel;Linux;Operating systems;Platform virtualization;Real time systems;Virtual machine monitors;Yarn}, 
doi={10.1109/NCM.2008.165}, 
month={Sept},}
@ARTICLE{7374832, 
author={J. Herbert and S. Wilson and A. D. Rakic and T. Taimre}, 
journal={Electronics Letters}, 
title={FPGA implementation of a high-speed, real-time, windowed standard deviation filter}, 
year={2016}, 
volume={52}, 
number={1}, 
pages={22-23}, 
abstract={Characterisation of the standard deviation of a time-series signal has uncommon, yet widespread applications. The usual requirement for a representation of signal standard deviation in real-time implies a high computation speed. A method based on a field programmable gate array (FPGA) implementation is presented. The technique is benchmarked against conventional computational approaches and shows a single windowed standard deviation update calculation of a 16 bit sample can be achieved in 11 ns on a modern CPU. The FPGA implementation is found to be superior to all other approaches examined with an operation time of below 10 ns, and thus provides a useful tool for the real-time measurement of the standard deviation of signals above 100 MHz.}, 
keywords={field programmable gate arrays;filters;time series;FPGA;field programmable gate array;modern CPU;time-series signal;windowed standard deviation filter;word length 16 bit}, 
doi={10.1049/el.2015.2407}, 
ISSN={0013-5194}, 
month={},}