Automatically generated by Mendeley Desktop 1.18
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@inproceedings{Inam2011,
abstract = {This paper presents the implementation of a Hierarchical Scheduling Framework (HSF) on an open source real-time operating system (FreeRTOS) to support the temporal isolation between a number of applications, on a single processor. The goal is to achieve predictable integration and reusability of independently developed components or applications. We present the initial results of the HSF implementation by running it on an AVR 32-bit board EVK1100. The paper addresses the fixed-priority preemptive scheduling at both global and local scheduling levels. It describes the detailed design of HSF with the emphasis of doing minimal changes to the underlying FreeRTOS kernel and keeping its API intact. Finally it provides (and compares) the results for the performance measures of idling and deferrable servers with respect to the overhead of the implementation.},
author = {Inam, R and M{\"{a}}ki-Turja, J and Sj{\"{o}}din, M and Ashjaei, S M H and Afshar, S},
booktitle = {ETFA2011},
doi = {10.1109/ETFA.2011.6059016},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Inam et al. - 2011 - Hierarchical Scheduling Framework Implementation in FreeRTOS.pdf:pdf},
issn = {1946-0740},
keywords = {API,AVR EVK1100,FreeRTOS kernel,Job shop scheduling,Kernel,Processor scheduling,Real time systems,SMS1,Schedules,Servers,application program interfaces,application reusability,fixed-priority preemptive scheduling,fixed-priority scheduling,global scheduling levels,hierarchical scheduling framework,independently developed component reusability,local scheduling levels,object-oriented programming,open source real-time operating system,operating system kernels,predictable integration,public domain software,real-time systems,scheduling,single processor,software reusability,temporal isolation},
mendeley-tags = {SMS1},
month = {sep},
pages = {1--10},
title = {{Support for hierarchical scheduling in FreeRTOS}},
year = {2011}
}
@article{Bergel2011,
abstract = {Wireless sensor networks necessitate a programming model different from those used to develop desktop applications. Typically, resources in terms of power and memory are constrained. C is the most common programming language used to develop applications on very small embedded sensor devices. We claim that C does not provide efficient mechanisms to address the implicit asynchronous nature of sensor sampling. C applications for these devices suffer from a disruption in their control flow. In this paper, we present FlowTalk, a new object-oriented programming language aimed at making software development for wireless embedded sensor devices easier. FlowTalk is an object-oriented programming language in which dynamicity (e.g., object creation) has been traded for a reduction in memory consumption. The event model that traditionally comes from using sensors is adapted in FlowTalk with controlled disruption, a light-weight continuation mechanism. The essence of our model is to turn asynchronous long-latency operations into synchronous and blocking method calls. FlowTalk is built for TinyOS and can be used to develop applications that can fit in 4 KB of memory for a large number of wireless sensor devices.},
author = {Bergel, Alexandre and Harrison, William and Cahill, Vinny and Clarke, Siobh{\'{a}}n},
doi = {10.1109/TSE.2010.66},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Bergel et al. - 2011 - FlowTalk Language Support for Long-Latency Operations in Embedded Devices.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Embedded systems,SMS1,object-based programming},
mendeley-tags = {SMS1},
number = {4},
pages = {526--543},
title = {{FlowTalk: Language Support for Long-Latency Operations in Embedded Devices}},
volume = {37},
year = {2011}
}
@inproceedings{Park2015,
abstract = {Mission critical embedded software for autonomous operation requires high development cost due to its long development cycle. One of the potential solutions for reducing the cost is to reuse the software developed at previous missions. Virtual machine platform such as JVM is a good example to provide code portability across various missions. Flight software in aerospace field is adopting this concept to improve reusability and eventually to reduce development cost. In this paper, we propose a Lua-based virtualization environment for spacecraft flight software. Flight software for spacecraft control consists of a few tasks that are highly autonomous. Lua is chosen as the script language for programming the control tasks. Though Lua was designed with simplicity and portability, it only supports multithreading with collaborative coroutines. To support preemptive multitasking, we implement time slicing coroutines as spacecraft control processes. New coroutine scheduler is devised and time slicing functionality is added into the scheduler. Scheduler locking and message passing with external flight software are also implemented. Instead of modifying the Lua interpreter, we have exploited the debug support APIs for our implementation. For evaluation, we have implemented the flight software virtualization environment on the flight computer. Accuracy of the time slicing scheduler is also analyzed.},
author = {Park, Sihyeong and Kim, Hyungshin and Kang, Soo Yeong and Koo, Cheol Hea and Joe, Hyunwoo},
booktitle = {2015 IEEE 13th International Conference on Embedded and Ubiquitous Computing},
doi = {10.1109/EUC.2015.21},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Park et al. - 2015 - Lua-Based Virtual Machine Platform for Spacecraft On-Board Control Software.pdf:pdf},
isbn = {9781467382991},
keywords = {Lua,OBCP,SMS1,mission critical embedded software,reusability,spacecraft,virtual machine},
mendeley-tags = {SMS1},
pages = {44--51},
title = {{Lua-Based Virtual Machine Platform for Spacecraft On-Board Control Software}},
year = {2015}
}
@article{Yu2008,
abstract = {Although TinyOS has been regarded as the defacto standard for WSN (Wireless Sensor Network) applications, its simple task scheduling mechanism became a great obstacle to WSN applications. This paper, from two directions (one based on cooperative, the other based on preemptive), presented a variety of scheduling algorithms and their application in TinyOS. And their characters and advantage were discussed as well in terms of energy consuming, tasks executing efficiency. Then a new, integrated and adaptive task scheduling mechanism was pointed out for the future TinyOS task scheduling. This new scheduling mechanism was characterized with features of dynamical adaptability and context-awareness.},
author = {Yu, Min and Xiahou, SiJi and Li, XinYu},
doi = {10.1109/WiCom.2008.960},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Yu, Xiahou, Li - 2008 - A Survey of Studying on Task Scheduling Mechanism for TinyOS.pdf:pdf},
isbn = {9781424421084},
journal = {2008 4th International Conference on Wireless Communications, Networking and Mobile Computing},
keywords = {SMS1,Task scheduling,TinyOS,WSN},
mendeley-tags = {SMS1},
pages = {1--4},
title = {{A Survey of Studying on Task Scheduling Mechanism for TinyOS}},
year = {2008}
}
@inproceedings{Khezri2008,
abstract = {TinyOS is the current state of the art in operating systems for sensor network research. Event- based programming model of TinyOS presents concept of Task to allow postponing processing. For little processing and memory overhead and to avoid race conditions, tasks are non-preemptive. This causes executing long running task reduce system responsiveness. In general two approaches suggested for solving this problem: cooperative and multithreaded multitasking. In this paper we propose a new TinyOS task scheduler to integrate these approaches with new type of tasks. We argue that this approach improves the overall system responsiveness without concerning about data races or complicate programming for developers.},
author = {Khezri, Meysam and Sarram, Mehdi Agha and Adibniya, Fazlollah},
booktitle = {2008 IEEE International Symposium on Parallel and Distributed Processing with Applications},
doi = {10.1109/ISPA.2008.138},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Khezri, Sarram, Adibniya - 2008 - Simplifying Concurrent Programming of Networked Embedded Systems.pdf:pdf},
isbn = {978-0-7695-3471-8},
keywords = {Delay,Embedded system,Job shop scheduling,Multitasking,Operating systems,Programming profession,SMS1,Sensor systems,Sensor systems and applications,Wireless sensor networks,Yarn},
mendeley-tags = {SMS1},
pages = {993--998},
title = {{Simplifying Concurrent Programming of Networked Embedded Systems}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4725258},
year = {2008}
}
@inproceedings{Karpin2007,
abstract = {Programming Wireless Sensor Network (WSN) applications is known to be a difficult task. Part of the problem is that the resource limitations of typical WSN nodes force programmers to use relatively low-level techniques to deal with the logical concurrency and asynchronous event handling inherent in these applications. In addition, existing general-purpose, nodelevel programming tools only support the networked nature of WSN applications in a limited way and result in application code that is hardly portable across different software platforms. All of this makes programming a single device a tedious and error-prone task. To address these issues we propose a high-level programming model that allows programmers to express applications as hierarchical state machines and to handle events and application concurrency in a way similar to imperative synchronous languages. Our program execution model is based on static scheduling what allows for standalone application analysis and testing. For deployment, the resulting programs are translated into efficient sequential C code. A prototype compiler for TinyOS has been implemented and its evaluation in described in this paper.},
author = {Karpinski, Marcin and Cahill, Vinny},
booktitle = {2007 4th Annual IEEE Communications Society Conference on Sensor, Mesh and Ad Hoc Communications and Networks},
doi = {10.1109/SAHCN.2007.4292873},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Karpinski, Cahill - 2007 - High-Level Application Development is Realistic for Wireless Sensor Networks.pdf:pdf},
isbn = {1424412684},
keywords = {Application software,Computer languages,Computer science,Concurrent computing,Hardware,Operating systems,Peer to peer computing,Programming profession,Prototypes,SMS1,Wireless sensor networks},
mendeley-tags = {SMS1},
pages = {610--619},
title = {{High-Level Application Development is Realistic for Wireless Sensor Networks}},
year = {2007}
}
@inproceedings{Fritzsche2010,
abstract = {Real-time systems mainly consist of time or event-triggered tasks that must satisfy deadline-constraints and other limitations to the execution time. Scheduling of them is a common problem especially if no operating system can be used because of limited resources like code-size and CPU power. Previous approaches deal with multi-frame models to split tasks into smaller subtask that may be arranged at compile-time in a static way to cope with given deadlines. Handling of non-periodic events and context-switching problems demand a more dynamic scheduling. This paper presents an approach of using manually given information for timing constraints in order to rearrange the code to satisfy the deadlines automatically. The presented design is still able to handle events and to force the given functions to cooperate. Supporting hardware for producing timing-events may further help the system to organize the program-flow.},
author = {Fritzsche, Rene and Siemers, Christian},
booktitle = {2010 World Automation Congress},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Fritzsche, Siemers - 2010 - Scheduling of Time Enhanced C (Tec).pdf:pdf},
isbn = {9781424496730},
keywords = {SMS1,application-internal scheduler,forced cooperative design,multi-frame tasks,semi-dynamic scheduling,time-enhanced language},
mendeley-tags = {SMS1},
pages = {1--6},
title = {{Scheduling of Time Enhanced C (Tec)}},
year = {2010}
}
@article{Susilo2009,
abstract = {A ZigBee compliant wireless controller which manages multiple tasks, such as acquiring data from sensors and driving actuators, has been purposely developed for robotic capsular endoscopy applications. Preemptive priority pseudokernel, consisting of state-driven code, coroutine, and pooled-loop algorithm, has been implemented to perform hard, firm and soft real time applications. All the components have been placed on a miniaturized board ready to be integrated in a robotic capsule (max volume of 2 cm3).},
author = {Susilo, E. and Valdastri, P. and Menciassi, A. and Dario, P.},
doi = {10.1016/j.sna.2009.03.036},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Susilo et al. - 2009 - A miniaturized wireless control platform for robotic capsular endoscopy using advanced pseudokernel approach.pdf:pdf},
issn = {09244247},
journal = {Sensors and Actuators, A: Physical},
keywords = {Pseudokernel,Real time embedded system,Robotic capsular endoscopy,SMS1,Wireless miniaturized control board},
mendeley-tags = {SMS1},
number = {1},
pages = {49--58},
title = {{A miniaturized wireless control platform for robotic capsular endoscopy using advanced pseudokernel approach}},
volume = {156},
year = {2009}
}
@article{Liu2011,
abstract = {SystemC is a widely used electronic system-level (ESL) design language that can be used to model both hardware and software at different stages of system design. There has been a lot of research on behavior synthesis of hardware from SystemC, but relatively little work on synthesizing embedded software for SystemC designs. In this letter, we present an approach to automatic software synthesis from SystemC-based on coroutines instead of the traditional approaches based on real-time operating system (RTOS) threads. Performance evaluation results on some realistic applications show that our approach results in impressive reduction of runtime overheads compared to the thread-based approaches.},
author = {Liu, Weichen and Xu, Jiang and Muppala, Jogesh K. and Zhang, Wei and Wu, Xiaowen and Ye, Yaoyao and Zhang, Wei},
doi = {10.1109/LES.2011.2112634},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Liu et al. - 2011 - Coroutine-Based Synthesis of Efficient Embedded Software From SystemC Models.pdf:pdf},
isbn = {1943-0663 VO - 3},
issn = {19430663},
journal = {IEEE Embedded Systems Letters},
keywords = {Coroutines,LVL0,Performance,Protothreads,SMS1,SystemC,software synthesis},
mendeley-tags = {Coroutines,LVL0,Protothreads,SMS1},
number = {1},
pages = {46--49},
title = {{Coroutine-Based Synthesis of Efficient Embedded Software From SystemC Models}},
volume = {3},
year = {2011}
}
@article{Motika2015,
abstract = {A key issue in the development of reliable embedded software is the proper handling of reactive control-flow, which typically involves concurrency. Java and its thread concept have only limited provisions for implementing deterministic concurrency. Thus, as has been observed in the past, it is challenging to develop concurrent Java programs without any deadlocks or race conditions. To alleviate this situation, the Light-weight Synchronous Java (SJL) approach presented here adopts the key concepts that have been established in the world of synchronous programming for handling reactive control-flow. Thus SJL not only provides deterministic concurrency, but also different variants of deterministic preemption. Furthermore SJL allows concurrent threads to communicate with Esterel-style signals. As a case study for an embedded system usage, we also report on how the SJL concepts have been ported to the ARM-based Lego Mindstorms NXT system. We evaluated the SJL approach to be efficient and provide experimental results comparing it to Java threads. {\textcopyright} 2014, Springer-Verlag Wien.},
author = {Motika, Christian and von Hanxleden, Reinhard},
doi = {10.1007/s00607-014-0416-7},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Motika, von Hanxleden - 2015 - Light-weight Synchronous Java (SJL) An approach for programming deterministic reactive systems with Java.pdf:pdf},
isbn = {0060701404},
issn = {0010485X},
journal = {Computing},
keywords = {Deterministic concurrency,Deterministic preemption,Java,Light-weight scheduling,Reactive systems,SMS1,Synchronous programming},
mendeley-tags = {SMS1},
number = {3},
pages = {281--307},
title = {{Light-weight Synchronous Java (SJL): An approach for programming deterministic reactive systems with Java}},
volume = {97},
year = {2015}
}
@inproceedings{Strube2010,
abstract = {We present an integrated approach for supporting in-network sensor data processing in dynamic and heterogeneous sensor networks. The concept relies on data stream processing techniques that define and optimize the distribution of queries and their operators. We anticipate a high degree of dynamics in the network, which can for example be expected in the case of wildlife monitoring applications. The distribution of operators to individual nodes demands system level capabilities not available in current sensor node operating systems. In particular, we present a system for seamless and on demand operator migration between sensor nodes. Our framework, which we implemented for Contiki running on TelosB nodes, supports stateful module migration including selected parts of the code and data sections.},
author = {Strube, M and Daum, M and Kapitza, R and Villanueva, F and Dressler, F},
booktitle = {The 7th IEEE International Conference on Mobile Ad-hoc and Sensor Systems (IEEE MASS 2010)},
doi = {10.1109/MASS.2010.5663821},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Str{\"{u}}be et al. - 2010 - Dynamic operator replacement in sensor networks.pdf:pdf},
issn = {2155-6806},
keywords = {Contiki running,Data processing,Distributed databases,Operating systems,Programming,Runtime,SMS1,Servers,TelosB nodes,Wireless sensor networks,data stream processing,dynamic operator replacement,dynamic sensor networks,heterogeneous sensor networks,in-network sensor data processing,optimisation,optimization,wireless sensor networks},
mendeley-tags = {SMS1},
month = {nov},
pages = {748--750},
title = {{Dynamic operator replacement in sensor networks}},
year = {2010}
}
@article{Andersen2017b,
abstract = {To enable a prosperous Internet of Things (IoT), devices and services must be extensible and adapt to changes in the environment or user interaction patterns. These requirements manifest as a set of design principles for each of the layers in an IoT ecosystem, from hardware to cloud services. This paper gives concrete guidelines learned from implementing and deploying a full-stack synergistic IoT platform. We address hardware design concerns and present a reference platform, Firestorm. Upon this platform, we demonstrate firmware and personal-area networking concerns and solutions. Moving out towards larger scales we address local service discovery and syndication, and show how these principles carry through to global operation where security concerns dominate.},
author = {Andersen, Michael P. and Fierro, Gabe and Culler, David E.},
doi = {10.1016/j.jnca.2016.10.017},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Andersen, Fierro, Culler - 2017 - Enabling synergy in IoT Platform to service and beyond.pdf:pdf},
isbn = {9781467399487},
issn = {1084-8045},
journal = {Journal of Network and Computer Applications},
keywords = {Embedded operating systems,Internet of Things,LVL0,LVL1,Middleware,Publish-subscribe,SMS1,Security,Sensor motes,Trust,Wireless sensor networks},
mendeley-tags = {LVL0,LVL1,SMS1},
pages = {96--110},
title = {{Enabling synergy in IoT: Platform to service and beyond}},
volume = {81},
year = {2017}
}
@inproceedings{Andersen2016,
abstract = {Modern IoT prototyping platforms fall short in terms of energy efficiency, connectivity and software programming practices. We present the design of a new hardware and software platform that addresses these shortcomings by bringing together Mobile, Wearable, Maker and Wireless Sensor Network technologies to enable rapid prototyping with a high degree of synergy and energy efficiency. This is achieved in part by leveraging the Memory Protection Unit on modern microcontrollers along with a novel syscall interface to provide kernel / user isolation and a clean concurrency model. Such a design allows a wide range of languages to be used for application development without significant adaptation. We demonstrate how careful choice of application language allows the naturally asynchronous nature of embedded programming to be expressed cleanly and powerfully. Finally we evaluate the platform in several integrated use cases, providing examples of the capabilities introduced by Synergy.},
address = {Vienna, Austria},
author = {Andersen, Michael P. and Fierro, Gabe and Culler, David E.},
booktitle = {2016 15th ACM/IEEE International Conference on Information Processing in Sensor Networks (IPSN)},
doi = {10.1109/IPSN.2016.7460722},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Andersen, Fierro, Culler - 2016 - System Design for a Synergistic, Low Power MoteBLE Embedded Platform.pdf:pdf},
isbn = {978-1-5090-0802-5},
keywords = {LVL0,LVL1,SMS1},
mendeley-tags = {LVL0,LVL1,SMS1},
month = {apr},
pages = {1--12},
publisher = {IEEE},
title = {{System Design for a Synergistic, Low Power Mote/BLE Embedded Platform}},
url = {http://ieeexplore.ieee.org/document/7460722/},
year = {2016}
}
@inproceedings{VonHanxleden2009,
abstract = {SyncCharts in C (SC) extends C with control flow operators for deterministic, light-weight concurrency and preemption. SC is based on SyncCharts, a synchronous variant of Statecharts with a sound formal basis. SC implements concurrency via a simulation of multi-threading, inspired by reactive processing. This approach permits very fast context switches and allows to express SC operators with regular, sequential C code. Thus a concurrent SC program requires neither a special compiler nor OS support for concurrency. A reference implementation of SC, based on C macros, is available as open source code. SC can be used in a number of scenarios: 1) as a regular programming language, requiring just a C compiler; 2) as an intermediate target language for synthesizing graphical SyncChart models into executable code, in a traceable manner; 3) as instruction set architecture for programming precision timed (PRET) or reactive architectures, abstracting functionality from physical timing; or 4) as a virtual machine instruction set, with a very dense encoding.},
address = {New York, NY, USA},
author = {von Hanxleden, Reinhard},
booktitle = {Proceedings of the Seventh ACM International Conference on Embedded Software},
doi = {10.1145/1629335.1629366},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/von Hanxleden - 2009 - SyncCharts in C A Proposal for Light-weight, Deterministic Concurrency.pdf:pdf},
isbn = {978-1-60558-627-4},
keywords = {SMS1,SyncCharts,esterel,model-based design,multi-threading,reactive processing,statecharts,synchronous programming},
mendeley-tags = {SMS1},
pages = {225--234},
publisher = {ACM},
title = {{SyncCharts in C: A Proposal for Light-weight, Deterministic Concurrency}},
url = {http://doi.acm.org/10.1145/1629335.1629366},
year = {2009}
}
@article{Andalam2014,
abstract = {Safety-critical embedded systems, commonly found in automotive, space, and health-care, are highly reactive and concurrent. Their most important characteristics are that they require both functional and timing correctness. C has been the language of choice for programming such systems. However, C lacks many features that can make the design process of such systems seamless while also maintaining predictability. This paper addresses the need for a C-based design framework for achieving time predictability. To this end, we propose the PRET-C language and the ARPRET architecture. PRET-C offers a small set of extensions to a subset of C to facilitate effective concurrent programming. We present a new synchronous semantics for PRET-C. It guarantees that all PRET-C programs are deterministic, reactive, and provides thread-safe communication via shared memory access. This simplifies considerably the design of safety-critical systems. We also present the architecture of a precision timed machine (PRET) called ARPRET. It offers the ability to design time predictable architectures through simple customizations of soft-core processors. We have designed ARPRET particularly for efficient and predictable execution of PRET-C. We demonstrate through extensive benchmarking that PRET-C based system design excels in comparison to existing C-based paradigms. We also qualitatively compare our approach to the Berkeley-Columbia PRET approach. We have demonstrated that the proposed approach provides an ideal framework for designing and validating safety-critical embedded systems.},
author = {Andalam, Sidharta and Roop, Partha S. and Girault, Alain and Traulsen, Claus},
doi = {10.1109/TC.2013.28},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Andalam et al. - 2014 - A Predictable Framework for Safety-Critical Embedded Systems.pdf:pdf},
isbn = {0018-9340 VO - 63},
issn = {00189340},
journal = {IEEE Transactions on Computers},
keywords = {ARPRET,ARPRET architecture,Berkeley-Columbia PRET approach,C language,C-based design framework,Computer architecture,Instruction sets,PRET,PRET-C,PRET-C language,PRET-C programs,Precision Timed C language,Programming,Real-time systems,SMS1,Safety-critical systems,Semantics,Timing,WCET,WCRT,architecture of a precision timed machine,concurrent programming,deterministic programs,embedded systems,lightweight multithreaded language,multi-threading,programming language semantics,reactive programs,safety-critical embedded systems,safety-critical software,shared memory access,shared memory systems,soft-core processors,synchronous languages,synchronous semantics,thread-safe communication,time predictability,time predictable architectures},
mendeley-tags = {SMS1},
number = {7},
pages = {1600--1612},
title = {{A Predictable Framework for Safety-Critical Embedded Systems}},
volume = {63},
year = {2014}
}
@inproceedings{Clark2009,
abstract = {As the power of the integrated processors that control today's instruments continues to climb, instrument vendors will increasingly add features that allow users to utilize the added intelligence by embedding custom applications directly onboard the instrument. For the test, measurement and automation industries, this paradigm is a complement to, among other things, the advent of synthetic instruments that can ldquobe anything you want,rdquo the frequent use of mezzanine type hardware and the rise of the LXI specification in which instrument to instrument messaging allows one instrument to control and communicate with another without the necessity of a host PC. There are various approaches the instrument vendor can take to permit users to develop embedded applications to be run on the instrument processor. Arguably the most advantageous approach, to both the vendor and customer, is to embed a high level scripting language allowing the user to easily develop scripts to perform instrument based operations. The Lua scripting language is a compact, full featured scripting language that is easily portable and seamlessly integrates into embedded designs. Written in pure ISO ANSI-C, the Lua interpreter and Lua libraries have been successfully ported to a large number of platforms, big and small, and with and without advanced operating systems such as Windows and Linux. Lua contains an API for interfacing directly to and from the instrument's embedded firmware and includes a full suite of libraries. Further, Lua is extendable. Thus, in addition to embedding the language interpreter and libraries, the vendor can implement custom libraries and various other custom utilities to increase the flexibility of the system and enhance the capabilities of the user developed scripts. This paper studies the use of Lua in intelligent instrumentation. It discusses features that provide flexibility and power to users embedding applications onboard instruments and it presents some real wo- rld applications of the technology.},
author = {Clark, David L.},
booktitle = {2009 IEEE AUTOTESTCON},
doi = {10.1109/AUTEST.2009.5314042},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Clark - 2009 - Powering intelligent instruments with Lua scripting.pdf:pdf},
isbn = {978-1-4244-4980-4},
issn = {1088-7725},
keywords = {Coroutines,Lua,SMS1},
mendeley-tags = {Coroutines,Lua,SMS1},
month = {sep},
pages = {101--106},
publisher = {IEEE},
title = {{Powering intelligent instruments with Lua scripting}},
url = {http://ieeexplore.ieee.org/document/5314042/},
year = {2009}
}
@article{Kumar2007,
abstract = {The overhead of context-switching limits efficient scheduling of multiple concurrent threads on a uniprocessor when real-time requirements exist. Existing software thread integration (STI) methods reduce context switches, but only provide synchronous thread progress within integrated functions. For the remaining, non-integrated portions of the secondary threads to run and avoid starvation, the primary thread must have adequate amounts of coarse-grain idle time (longer than two context-switches). We have developed asynchronous software thread integration (ASTI) methods which address starvation through the efficient use of coroutine calls and integration. ASTI allows threads to make independent progress efficiently and reduces the number of context switches needed through integration. Software-implemented protocol controllers are crippled by this problem; the primary thread "bit-bangs" each bit of a message onto or off of the bus, leaving only fragments of idle time shorter than a bit time. This fragmented time may be too short to recover through context switching, so only the primary thread can execute during message transmission or reception, slowing the secondary threads and potentially making them miss their deadlines. ASTI simplifies the implementation of embedded communication protocols on low-cost, moderate speed (1 - 100 MHz, 8- and 16-bit) microcontrollers. We demonstrate ASTI by replacing a standard automotive communication protocol controller (J1850) with software and generic hardware. Secondary thread performance improves significantly when compared with a traditional interrupt-based software approach.},
address = {New York, NY, USA},
author = {Kumar, Nagendra J. and Asokan, Vasanth and Shivshankar, Siddhartha and Dean, Alexander G.},
doi = {10.1145/1210268.1210270},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Kumar et al. - 2007 - Efficient Software Implementation of Embedded Communication Protocol Controllers Using Asynchronous Software Threa.pdf:pdf},
issn = {1539-9087},
journal = {ACM Transactions on Embedded Computing Systems},
keywords = {Asynchronous software thread integration,J1850,SMS1,fine-grain concurrency,hardware to software migration,software-implemented communication protocol contro},
mendeley-tags = {SMS1},
month = {feb},
number = {1},
publisher = {ACM},
title = {{Efficient Software Implementation of Embedded Communication Protocol Controllers Using Asynchronous Software Thread Integration with Time- and Space-efficient Procedure Calls}},
url = {http://portal.acm.org/citation.cfm?doid=1210268.1210270 http://doi.acm.org/10.1145/1210268.1210270},
volume = {6},
year = {2007}
}
@inproceedings{Durmaz2017,
address = {Dagstuhl, Germany},
annote = {From Duplicate 2 (Modelling Contiki-Based IoT Systems - Durmaz, Caglar; Challenger, Moharram; Dagdeviren, Orhan; Kardas, Geylani)

Keywords: Domain-specific Modelling, Metamodel, Model-driven Engineering, Internet of Things, Wireless Sensor Networks, Embedded Software, Contiki Operating Sys},
author = {Durmaz, Caglar and Challenger, Moharram and Dagdeviren, Orhan and Kardas, Geylani},
booktitle = {6th Symposium on Languages, Applications and Technologies (SLATE 2017)},
doi = {10.4230/OASIcs.SLATE.2017.5},
editor = {Queir{\'{o}}s, Ricardo and Pinto, M{\'{a}}rio and Sim{\~{o}}es, Alberto and Leal, Jos{\'{e}} Paulo and Varanda, Maria Jo{\~{a}}o},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Durmaz et al. - 2017 - Modelling Contiki-Based IoT Systems.pdf:pdf},
isbn = {978-3-95977-056-9},
issn = {2190-6807},
keywords = {2017,4230,5,SMS1,and phrases domain-specific modelling,contiki operating system,digital object identifier 10,embedded software,in-,metamodel,model-driven engineering,oasics,slate,ternet of things,wireless sensor networks},
mendeley-tags = {SMS1},
number = {5},
pages = {5:1----5:13},
publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
series = {OpenAccess Series in Informatics (OASIcs)},
title = {{Modelling Contiki-Based IoT Systems}},
url = {http://drops.dagstuhl.de/opus/volltexte/2017/7940},
volume = {56},
year = {2017}
}
@inbook{St-Amour2010,
abstract = {Due to their tight memory constraints, small microcontroller based embedded systems have traditionally been implemented using low-level languages. This paper shows that the Scheme programming language can also be used for such applications, with less than 7 kB of total memory. We present PICOBIT, a very compact implementation of Scheme suitable for memory constrained embedded systems. To achieve a compact system we have tackled the space issue in three ways: the design of a Scheme compiler generating compact bytecode, a small virtual machine, and an optimizing C compiler suited to the compilation of the virtual machine.},
address = {Berlin, Heidelberg},
author = {St-Amour, Vincent and Feeley, Marc},
booktitle = {Implementation and Application of Functional Languages. IFL 2009. Lecture Notes in Computer Science, vol 6041.},
doi = {10.1007/978-3-642-16478-1_1},
editor = {Moraz{\'{a}}n, Marco T and Scholz, Sven-Bodo},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/St-Amour, Feeley - 2010 - PICOBIT A compact scheme system for microcontrollers.pdf:pdf},
isbn = {978-3-642-16478-1},
keywords = {SMS1},
mendeley-tags = {SMS1},
pages = {1--17},
publisher = {Springer Berlin Heidelberg},
title = {{PICOBIT: A Compact Scheme System for Microcontrollers}},
url = {https://doi.org/10.1007/978-3-642-16478-1{\_}1},
year = {2010}
}
@inproceedings{Elsts2017,
abstract = {Building large-scale low-power Internet of Things (IoT) systems remains a challenge, as these systems have to meet the requirements of reliability, robustness, and energy-efficiency while running on resource-restricted microcontrollers without memory protection. In this paper we present the case study of IoT in SPHERE (Sensor Platform for HEalthcare in a Residential Environment), a project with the objective to develop a multipurpose, multi-modal sensor platform for monitoring people's health inside their homes. Atypically for academic projects, in 2017 the SPHERE software is going to be deployed in a 100-home study in volunteer homes, therefore it has to satisfy many real-world requirements. We discuss the requirements for IoT networking in this project, the IoT architecture (built on top of Contiki OS), software engineering challenges and lessons learned, as well as some of the general aspects that still make embedded low-power IoT software development difficult.},
author = {Elsts, Atis and Oikonomou, George and Fafoutis, Xenofon and Piechocki, Robert},
booktitle = {2017 Global Internet of Things Summit (GIoTS)},
doi = {10.1109/GIOTS.2017.8016226},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Elsts et al. - 2017 - Internet of Things for smart homes Lessons learned from the SPHERE case study.pdf:pdf},
isbn = {9781509058730},
keywords = {Coroutines,Hardware,IEEE 802.15 Standard,Internet of Things,IoT,Logic gates,Protocols,Reliability,SMS1,SPHERE case study,Servers,Software,assisted living,blocking,embedded low-power IoT software development,energy-efficiency,large-scale low-power Internet of Things systems,multipurpose multimodal sensor platform,power aware computing,real-world requirements,resource-restricted microcontrollers,sensor platform for healthcare in a residential en,sensors,smart homes,software engineering,software engineering challenges,volunteer homes},
mendeley-tags = {Coroutines,SMS1,blocking},
pages = {1--6},
title = {{Internet of Things for smart homes: Lessons learned from the SPHERE case study}},
year = {2017}
}
@inbook{Niebert2014,
abstract = {We present a design approach for ``smart surfaces'' inspired by cellular automata. The aim is to construct and to program scalable distributed realtime interactive systems composed of inexpensive microcontrollers to build surfaces that interact physically with their environment. Our work is both pragmatic and integrated: it covers the entire chain from hardware considerations, a programming model based on a networked locally synchronous virtual machine, dedicated programming language features, a distributed embedded implementation and an integrated programming environment with a simulator implementation of the locally synchronous virtual machine.},
address = {Cham},
author = {Niebert, Peter and Caralp, Mathieu},
booktitle = {Theory and Practice of Natural Computing, TPNC 2014. Lecture Notes in Computer Science, vol 8890.},
doi = {10.1007/978-3-319-13749-0_2},
editor = {Dediu, Adrian-Horia and Lozano, Manuel and Mart{\'{i}}n-Vide, Carlos},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Sipper - 1997 - Cellular Programming.pdf:pdf},
isbn = {978-3-319-13749-0},
keywords = {SMS1},
mendeley-tags = {SMS1},
pages = {11--22},
publisher = {Springer International Publishing},
title = {{Cellular Programming}},
url = {https://doi.org/10.1007/978-3-319-13749-0{\_}2 http://link.springer.com/10.1007/978-3-319-13749-0{\_}2},
year = {2014}
}
@inproceedings{Jaaskelainen2008,
abstract = {Multithreading is an important software modularization technique. However, it can incur substantial overheads, especially in processors where the amount of architecturally visible state is large. We propose an implementation technique for co-operative multithreading, where context switches occur in places that minimize the amount of state that needs to be saved. The subset of processor state saved during each context switch is based on where the switch occurs.We have validated the approach by an empirical study of resource usage in basic blocks, and by implementing the co-operative threading in our compiler. Performance figures are given for an MP3 player utilizing the threading implementation.},
author = {J{\"{a}}{\"{a}}skel{\"{a}}inen, Pekka and Kellom{\"{a}}ki, Pertti and Takala, Jarmo and Kultala, Heikki and Lepist{\"{o}}, Mikael},
booktitle = {2008 IEEE/IFIP International Conference on Embedded and Ubiquitous Computing},
doi = {10.1109/EUC.2008.181},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/J{\"{a}}{\"{a}}skel{\"{a}}inen et al. - 2008 - Reducing Context Switch Overhead with Compiler-Assisted Threading.pdf:pdf},
isbn = {9780769534923},
keywords = {SMS1},
mendeley-tags = {SMS1},
pages = {461--466},
title = {{Reducing Context Switch Overhead with Compiler-Assisted Threading}},
volume = {2},
year = {2008}
}
@inproceedings{Riedel2010,
abstract = {Wireless Sensing and Radio Identification systems have undergone many innovations during the past years. This has led to short product lifetimes for both software and hardware compared to classical industries. However, especially industries dealing with long-term support of products, e.g. of industrial machinery, and product lifetime of 40+ years may especially profit from an Internet of Things. Motivated by a practical industrial servicing use case this paper shows how we hope to make equally sustainable IoT solutions by employing a model driven software development approach based on code generation for multi-protocol web service gateways.},
author = {Riedel, Till and Fantana, Nicolaie and Genaid, Adrian and Yordanov, Dimitar and Schmidtke, Hedda R and Beigl, Michael},
booktitle = {2010 Internet of Things (IOT)},
doi = {10.1109/IOT.2010.5678449},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Riedel et al. - 2010 - Using Web Service Gateways and Code Generation for Sustainable IoT System Development Motivation Use Case Driven.pdf:pdf},
keywords = {Automata,Internet of things,IoT system,Logic gates,Radiofrequency identification,SMS1,Semantics,Unified modeling language,Web service gateways,Web services,XML,code generation,industrial servicing,internetworking,multi-protocol,program compilers,protocols,radio identification systems,software development approach,software engineering,sustainable development},
mendeley-tags = {SMS1},
month = {nov},
pages = {1--8},
title = {{Using web service gateways and code generation for sustainable IoT system development}},
year = {2010}
}
@article{Schimpf2012b,
abstract = {Protothreads are stackless lightweight threads that provide a mechanism for concurrent programming with very low overhead in any environment that supports an ANSI-C compiler. No processor-specific task switching code is required to implement them. In their published form they are not quite adequate for a priority-based based scheduler and thus are of questionable utility in an embedded system with real-time requirements. This article discusses the protothread library along with modifications and an example priority-based scheduler that may be of some utility in embedded systems environments lacking an RTOS.},
author = {Schimpf, Paul H},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Schimpf - 2012 - Modified Protothreads for Embedded Systems.pdf:pdf},
journal = {Journal of Computing Sciences in Colleges},
keywords = {LVL0,Protothreads,SMS1},
mendeley-tags = {LVL0,Protothreads,SMS1},
number = {1},
pages = {177--184},
title = {{Modified Protothreads for Embedded Systems}},
url = {http://dl.acm.org/citation.cfm?id=2379703.2379738},
volume = {28},
year = {2012}
}
@inproceedings{Kugler2013,
abstract = {Wearable sensors are widely used for data collection in many applications. Ssensor nodes have also been applied for real-time applications, e.g. for ECG analysis or activity and fall detection. Processing of the sensor data is either done on an external device or on the node itself. While on-node processing reduces data rate and increases battery life, development and testing can be time-consuming. To allow faster implementation of such algorithms, we propose a simulation framework for the Shimmer platform using the Cooja simulator, MSPSim and the Contiki operating system. We provide the simulator and example applications compatible with the ShimmerConnect protocol, allowing streaming of raw and pre-processed sensor data to MATLAB, LabView and Android. Additionally, a simple activity and fall detection algorithm was implemented on the sensor node and evaluated using both the simulator and real hardware. In the future this will allow rapid development and testing of on-node pre-processing algorithms. {\textcopyright} 2013 IEEE.},
author = {Kugler, Patrick and Nordhus, Philipp and Eskofier, Bjoern},
booktitle = {2013 IEEE International Conference on Body Sensor Networks},
doi = {10.1109/BSN.2013.6575497},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Kugler, Nordhus, Eskofier - 2013 - Shimmer, Cooja and Contiki A new toolset for the simulation of on-node signal processing algorithms.pdf:pdf},
isbn = {9781479903306},
issn = {2376-8894},
keywords = {Bluetooth,Hardware,Operating systems,SMS1,Sensors,Testing,Wireless communication,Wireless sensor networks},
mendeley-tags = {SMS1},
pages = {1--6},
title = {{Shimmer, Cooja and Contiki: A new toolset for the simulation of on-node signal processing algorithms}},
year = {2013}
}
@inproceedings{Jahier2016,
abstract = {Debugging reactive programs requires to provide a lot of inputs -- at each reaction step. Moreover, because a reactive system reacts to an environment it tries to control, providing realistic inputs can be hard. The same considerations apply for automatic testing. This work take advantage on previous work on automated testing of reactive programs that close this feedback loop. This article demonstrates how to implement opportunistically such a debugging commands interpreter by taking advantage of an existing (ocaml) toplevel Read-Eval-Print Loop (REPL). Then it shows how a small kernel is enough to build a full-featured debugger with little effort. The given examples provide a tutorial for end-users that wish to write their own debugging primitives, fitting to their needs, or to tune existing ones. An orthogonal contribution of this article is to present an efficient way to implement the debugger coroutining using continuations. The Reactive programs DeBuGger (RDBG) prototype aims at being versatile and general enough to be able to deal with any reactive languages. We have experimented it on 2 synchronous programming: Lustre and Lutin.},
address = {New York, NY, USA},
author = {Jahier, Erwan},
booktitle = {Proceedings of the 19th International Workshop on Software and Compilers for Embedded Systems},
doi = {10.1145/2906363.2906372},
editor = {Stuijk, Sander},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Jahier - 2016 - RDBG a Reactive Programs Extensible Debugger.pdf:pdf},
isbn = {978-1-4503-4320-6},
keywords = {Code Instrumentation,Compiler,Continuations,Dynamic Analysis,Interpreter,Monitor,Programmable Debuggers,Reactive systems,SMS1,Synchronous languages},
mendeley-tags = {SMS1},
pages = {116--125},
publisher = {ACM},
series = {SCOPES '16},
title = {{RDBG: A Reactive Programs Extensible Debugger}},
url = {http://doi.acm.org/10.1145/2906363.2906372},
year = {2016}
}
@inbook{Lohmann2012,
abstract = {CiAO is the first operating-system family that has been developed with AOP concepts from the very beginning. By its aspect-aware design and implementation, CiAO reaches excellent configurability, separation of concerns, and low footprints in the resulting systems that outperform leading commercial implementations. CiAO implements the automotive operating-system standard OSEK/AUTOSAR OS and provides configurability of all fundamental system properties by means of AOP.},
address = {Berlin, Heidelberg},
author = {Lohmann, Daniel and Spinczyk, Olaf and Hofer, Wanja and Schr{\"{o}}der-Preikschat, Wolfgang},
booktitle = {Transactions on Aspect-Oriented Software Development IX},
doi = {10.1007/978-3-642-35551-6_5},
editor = {Leavens, Gary T and Chiba, Shigeru and Haupt, Michael and Ostermann, Klaus and Wohlstadter, Eric},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Lohmann et al. - 2012 - The aspect-aware design and implementation of the CiAO operating-system family.pdf:pdf},
isbn = {978-3-642-35551-6},
keywords = {SMS1},
mendeley-tags = {SMS1},
pages = {168--215},
publisher = {Springer},
title = {{The Aspect-Aware Design and Implementation of the CiAO Operating-System Family}},
url = {https://doi.org/10.1007/978-3-642-35551-6{\_}5},
year = {2012}
}
@inproceedings{Cohen2007b,
abstract = {This paper proposes a concurrency model which integrates the asynchronous and event-driven nature of wireless sensor networks with higher-level abstractions that provide a more familiar programming style for the developer. As a basis for this proposal, we designed and implemented a cooperative multitasking scheduler, based on coroutines, for the TinyOS operating system. We then used this scheduler to implement RPC-like interfaces that capture different communication patterns common in wireless sensor networks. This allows the programmer to work, when appropriate, with a synchronous style, while maintaining an asynchronous model at the message exchange level.},
author = {Cohen, Marcelo and Ponte, Thiago and Rossetto, Silvana and Rodriguez, Noemi},
booktitle = {2007 IEEE International Parallel and Distributed Processing Symposium},
doi = {10.1109/IPDPS.2007.370458},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Cohen et al. - 2007 - Using Coroutines for RPC in Sensor Networks.pdf:pdf},
isbn = {1424409101},
keywords = {Coroutines,LVL0,SMS1,TinyOS},
mendeley-tags = {Coroutines,LVL0,SMS1,TinyOS},
pages = {1--8},
title = {{Using Coroutines for RPC in Sensor Networks}},
year = {2007}
}
@inproceedings{Noman2017,
abstract = {Interoperability is one of the key requirements in the Internet of Things considering the diverse platforms, commu-nication standards and specifications available today. Inherent resource constraints in the majority of IoT devices makes it very difficult to use existing solutions for interoperability, thus demanding new approaches. This paper presents the process of adapting a lightweight interoperability middleware for IoT, LISA, from RIOT to Contiki OS and evaluates memory and power overheads. The middleware follows a service oriented architecture and classifies devices according to available resources to assign different roles, such as Application, Service and Manager Nodes. These roles live in different tiers in a generic IoT architecture, where the Manager nodes are located in the intermediate Fog layer. To adapt to an event based kernel of Contiki, the mid-dleware defines and handles a set of events that are used to communicate with the user application. A network of nodes is simulated to show the architecture promoted by the middleware and the results are presented.},
author = {Noman, Uzair A. and Negash, Behailu and Rahmani, Amir M. and Liljeberg, Pasi and Tenhunen, Hannu},
booktitle = {2017 14th IEEE Annual Consumer Communications and Networking Conference (CCNC)},
doi = {10.1109/CCNC.2017.7983156},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Noman et al. - 2017 - From threads to events Adapting a lightweight middleware for Contiki OS.pdf:pdf},
isbn = {9781509061969},
keywords = {Contiki,Internet of Things,Interoperability,LISA,SMS1},
mendeley-tags = {SMS1},
pages = {486--491},
title = {{From threads to events: Adapting a lightweight middleware for Contiki OS}},
year = {2017}
}
@article{Boers2010,
abstract = {We describe our “holistic” platform for devel- oping wireless ad hoc sensor networks and focus on its most representative and essential virtualization component: VUE2 (the Virtual Underlay Emulation Engine). Its role is to provide a vehicle for the authoritative emulation of com- plete networked applications before physically deploying any wireless nodes. The goal is to be able to verify those ap- plications exhaustively before programming the hardware, such that no further (field) tests are necessary. We explain how VUE2 achieves this goal owing to several facilitating factors, most notably the powerful programming paradigm that our platform adopts. As implied by the holistic nature of the discussed system, our work touches upon operating systems, simulation, network protocols, real-time systems, and programming methodology.},
author = {Boers, Nicholas M. and Gburzy{\'{n}}ski, Pawe{\l} and Nikolaidis, Ioanis and Olesi{\'{n}}ski, W{\l}odek},
doi = {10.1007/s11235-009-9246-x},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Boers et al. - 2010 - Developing wireless sensor network applications in a virtual environment.pdf:pdf},
issn = {10184864},
journal = {Telecommunication Systems},
keywords = {Application development,SMS1,Virtualization,Wireless sensor network},
mendeley-tags = {SMS1},
number = {2-3},
pages = {165--176},
title = {{Developing wireless sensor network applications in a virtual environment}},
volume = {45},
year = {2010}
}
@inproceedings{Oldewurtel2009,
abstract = {We present the RUNES architecture for reconfigurable embedded networked systems and wireless sensor networks. It is the first systems-level architecture for such networks to explicitly deal with heterogeneity in hardware platforms, link-layer technologies and networking protocols while offering a simple programming language independent set of APIs together with a component-oriented middleware for the application developers to work on. The solutions developed are particularly appropriate for use in various emergency response scenarios, in which reconfigurability is often a key requirement. We also report on an example realisation of our architecture in a prototypical demonstration environment in a particular emergency scenario. The evaluation of architectural aspects such as reconfigurability shows that great programming flexibility can be achieved at low implementation overhead. The experience gained from RUNES modular architecture are very promising both in academic and industry projects context.},
author = {Oldewurtel, Frank and Riihij{\"{a}}rvi, Janne and Rerkrai, Krisakorn and M{\"{a}}h{\"{o}}nen, Petri},
booktitle = {2009 Third International Conference on Sensor Technologies and Applications},
doi = {10.1109/SENSORCOMM.2009.26},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Oldewurtel et al. - 2009 - The RUNES Architecture for Reconfigurable Embedded and Sensor Networks.pdf:pdf},
isbn = {9780769536699},
keywords = {SMS1},
mendeley-tags = {SMS1},
pages = {109--116},
title = {{The RUNES Architecture for Reconfigurable Embedded and Sensor Networks}},
year = {2009}
}
@inbook{Alvira2013,
abstract = {This work presents a computer board designed for autonomous robotic sailboat control. Taking advantage of the current availability of feature-rich processors such as the LPC3130 from NXP and the MC13224v from Freescale Semiconductor used in this work, our design emphasizes low cost and power consumption, as well as small size. At the same time, the system is not excessively specialized; it runs 32-bit Linux and has network capability via Ethernet,WiFi, cellular or Bluetooth USB sticks. The computing system presented in this work is applicable to a variety of robotic sailboat applications, including making a 0.5 m Graupner Micro Magic fully autonomous without relying on a shore-side base station for computation.},
address = {Berlin, Heidelberg},
author = {Alvira, Mariano and Barton, Taylor},
booktitle = {Robotic Sailing 2012},
doi = {10.1007/978-3-642-33084-1_10},
editor = {Sauz{\'{e}}, Colin and Finnis, James},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Alvira, Barton - 2012 - Small and Inexpensive Single-Board Computer for Autonomous Sailboat Control.pdf:pdf},
isbn = {978-3-642-33084-1},
keywords = {SMS1},
mendeley-tags = {SMS1},
pages = {105--116},
publisher = {Springer, Berlin, Heidelberg},
title = {{Small and Inexpensive Single-Board Computer for Autonomous Sailboat Control}},
url = {https://doi.org/10.1007/978-3-642-33084-1{\_}10},
year = {2013}
}
@inproceedings{Evers2007,
abstract = {The supply chain management business can benefit greatly from automation, as recent developments with RFID technology shows. The use of Wireless Sensor Network technology promises to bring the next leap in efficiency and quality of service. However, current WSN system software does not yet provide the required functionality, flexibility and safety. This paper discusses a scenario showing how WSN technology can benefit supply chain management, and presents SensorScheme, a platform for realizing the scenario. SensorScheme is a general purpose WSN platform, providing a safe execution environment for dynamically loaded programs. It uses high level programming primitives like marshalled communication, automatic memory management, and multiprocessing facilities. SensorScheme makes efficient use of the little available memory present in WSN nodes, to allow larger and more complex programs than the state of the art. We present a SensorScheme implementation and provide experimental results to show its compactness, speed of operation and energy efficiency.},
author = {Evers, L and Havinga, P J M and Kuper, J and Lijding, M E M and Meratnia, N},
booktitle = {2007 IEEE Conference on Emerging Technologies and Factory Automation (EFTA 2007)},
doi = {10.1109/EFTA.2007.4416802},
file = {:E$\backslash$:/OneDrive - James Cook University/Mendeley Storage/Evers, Havinga - 2007 - Supply Chain Management Automation using Wireless Sensor Networks.pdf:pdf},
issn = {1946-0740},
keywords = {Automatic programming,Automation,Energy efficiency,Memory management,Quality of service,RFID technology,Radiofrequency identification,SMS1,Software safety,Supply chain management,System software,Wireless sensor networks,automatic memory management,multiprocessing facilities,radiofrequency identification,supply chain management,supply chain management automation,wireless sensor networks},
mendeley-tags = {SMS1},
month = {sep},
pages = {448--455},
title = {{SensorScheme: Supply chain management automation using Wireless Sensor Networks}},
year = {2007}
}
