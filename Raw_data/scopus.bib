% Encoding: UTF-8
Scopus
EXPORT DATE: 24 September 2017

@Conference{Branco20131318,
  author          = {Branco, A. and Moura, A.L.D. and Rodriguez, N. and Rossetto, S.},
  title           = {Teaching concurrent and distributed computing-Initiatives in Rio de Janeiro ;},
  year            = {2013},
  pages           = {1318-1323},
  note            = {cited By 0},
  abstract        = {In this paper we describe two ongoing initiatives for teaching concurrency and distribution in PUC-Rio and UFRJ. One of them is a new approach for teaching distributed systems. Conventional distributed system courses follow a syllabus in which a list of topics is discussed independently and at different levels of abstractions. In Edupar'2012, we proposed a course with a novel approach, using a wireless sensor network environment to pin all topics down to concrete applications and to maintain issues such as fault tolerance and coordination continuously present. The second initiative is a smaller one, in which we insert a new topic in a Systems Software course to allow students to have a better understanding of what is application-level multitasking and of how it can be implemented. In this paper, we report on the experience of teaching the proposed syllabus and the adjustments that were necessary. We also discuss some plans for the courses in 2013. © 2013 IEEE.},
  affiliation     = {Departamento de Inforḿatica, Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Departamento de Cîencia da Computaç ̃ao (DCC), Universidade Federal Do Rio de Janeiro (UFRJ), Rio de Janeiro, Brazil},
  art_number      = {6651023},
  author_keywords = {application-level multitasking; coroutines; cross-cutting approaches; event-based programming; fault tolerance},
  db              = {Scopus},
  document_type   = {Conference Paper},
  doi             = {10.1109/IPDPSW.2013.33},
  journal         = {Proceedings - IEEE 27th International Parallel and Distributed Processing Symposium Workshops and PhD Forum, IPDPSW 2013},
  source          = {Scopus},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84899759671&doi=10.1109%2fIPDPSW.2013.33&partnerID=40&md5=405fa61faee5d09dd9b12b335e0d43c7},
}

@Conference{Hannig201148,
  author          = {Hannig, F. and Roloff, S. and Snelting, G. and Teich, J. and Zwinkau, A.},
  title           = {Resource-aware programming and simulation of MPSoC architectures through extension of X10},
  year            = {2011},
  pages           = {48-55},
  note            = {cited By 20},
  abstract        = {The efficient use of future MPSoCs with f 000 or more processor cores requires new means of resource-aware programming to deal with increasing imperfections such as process variation, fault rates, aging effects, and power as well as thermal problems. In this paper, we apply a new approach called invasive computing that enables an application programmer to spread computations to processors deliberately and on purpose at certain points of the program. Such decisions can be made depending on the degree of application parallelism and the state of the underlying resources such as utilization, load, and temperature. The introduced programming constructs for resource-aware programming are embedded into the parallel computing language X10 as developed by IBM using a library-based approach. Moreover, we show how individual heterogeneous MPSoC architectures may be modeled for subsequent functional simulation by defining compute resources such as processors themselves by lightweight threads that are executed in parallel together with the application threads by the X10 run-time system. Thus, the state changes of each hardware resource may be simulated including temperature, aging, and other useful monitor functionality to provide a first high-level programming test-bed for invasive computing. Copyright © 2011 ACM.},
  affiliation     = {Hardware/Software Co-Design, Department of Computer Science, University of Erlangen, Nuremberg, Germany; Programming Paradigms Group, Karlsruhe Institute of Technology - KIT, Germany},
  author_keywords = {MPSoC; Resource-aware programming; Simulation; X10},
  db              = {Scopus},
  document_type   = {Conference Paper},
  doi             = {10.1145/1988932.1988941},
  journal         = {Proceedings of the 14th International Workshop on Software and Compilers for Embedded Systems, SCOPES 2011},
  source          = {Scopus},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051884920&doi=10.1145%2f1988932.1988941&partnerID=40&md5=3d1519478e4656a28a3cdf2d77e7d51c},
}

@Article{Liu201146,
  author          = {Liu, W. and Xu, J. and Muppala, J.K. and Zhang, W. and Wu, X. and Ye, Y.},
  title           = {Coroutine-based synthesis of efficient embedded software from SystemC models},
  journal         = {IEEE Embedded Systems Letters},
  year            = {2011},
  volume          = {3},
  number          = {1},
  pages           = {46-49},
  note            = {cited By 0},
  abstract        = {SystemC is a widely used electronic system-level (ESL) design language that can be used to model both hardware and software at different stages of system design. There has been a lot of research on behavior synthesis of hardware from SystemC, but relatively little work on synthesizing embedded software for SystemC designs. In this letter, we present an approach to automatic software synthesis from SystemC-based on coroutines instead of the traditional approaches based on real-time operating system (RTOS) threads. Performance evaluation results on some realistic applications show that our approach results in impressive reduction of runtime overheads compared to the thread-based approaches. © 2010 IEEE.},
  affiliation     = {University of Science and Technology, Hong Kong, Hong Kong; School of Computer Engineering, Nanyang Technological University, Singapore, Singapore},
  art_number      = {5710575},
  author_keywords = {Performance; software synthesis; SystemC},
  db              = {Scopus},
  document_type   = {Article},
  doi             = {10.1109/LES.2011.2112634},
  source          = {Scopus},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953090043&doi=10.1109%2fLES.2011.2112634&partnerID=40&md5=cda7ca81ba1ad7f9b463aef6ea7de23e},
}

@Article{Ierusalimschy20101,
  author        = {Ierusalimschy, R.},
  title         = {Programming with multiple paradigms in Lua},
  journal       = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year          = {2010},
  volume        = {5979 LNCS},
  pages         = {1-12},
  note          = {cited By 4},
  abstract      = {Lua is a scripting language used in many industrial applications, with an emphasis on embedded systems and games. Two key points in the design of the language that led to its widely adoption are flexibility and small size. To achieve these two conflicting goals, the design emphasizes the use of few but powerful mechanisms, such as first-class functions, associative arrays, coroutines, and reflexive capabilities. As a consequence of this design, although Lua is primarily a procedural language, it is frequently used in several different programming paradigms, such as functional, object-oriented, goal-oriented, and concurrent programming, and also for data description. In this paper we discuss what mechanisms Lua features to achieve its flexibility and how programmers use them for different paradigms. © 2010 Springer-Verlag.},
  affiliation   = {PUC-Rio, Rio de Janeiro, Brazil},
  db            = {Scopus},
  document_type = {Conference Paper},
  doi           = {10.1007/978-3-642-11999-6_1},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951550556&doi=10.1007%2f978-3-642-11999-6_1&partnerID=40&md5=aca0ecd60ebf4826323db2341c697c29},
}

@Article{Susilo200949,
  author          = {Susilo, E. and Valdastri, P. and Menciassi, A. and Dario, P.},
  title           = {A miniaturized wireless control platform for robotic capsular endoscopy using advanced pseudokernel approach},
  journal         = {Sensors and Actuators, A: Physical},
  year            = {2009},
  volume          = {156},
  number          = {1},
  pages           = {49-58},
  note            = {cited By 25},
  abstract        = {A ZigBee compliant wireless controller which manages multiple tasks, such as acquiring data from sensors and driving actuators, has been purposely developed for robotic capsular endoscopy applications. Preemptive priority pseudokernel, consisting of state-driven code, coroutine, and pooled-loop algorithm, has been implemented to perform hard, firm and soft real time applications. All the components have been placed on a miniaturized board ready to be integrated in a robotic capsule (max volume of 2 cm3). © 2009 Elsevier B.V. All rights reserved.},
  affiliation     = {CRIM Lab, Polo Sant'Anna Valdera, Scuola Superiore Sant'Anna, Pisa, Italy; Italian Institute of Technology Network, Genova, Italy},
  author_keywords = {Pseudokernel; Real time embedded system; Robotic capsular endoscopy; Wireless miniaturized control board},
  db              = {Scopus},
  document_type   = {Article},
  doi             = {10.1016/j.sna.2009.03.036},
  source          = {Scopus},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-71649092073&doi=10.1016%2fj.sna.2009.03.036&partnerID=40&md5=db6cc20670d440d9932bdca50bf6ba0a},
}

@Conference{Zdenek2007,
  author          = {Zdenek, J.},
  title           = {Efficient scheduler-dispatcher software architecture of the spacepower facility distributed control computer},
  year            = {2007},
  note            = {cited By 3},
  abstract        = {The system software architecture of the distributed control computer (computer network) of the mechatronic scientific facility (crystallizer) for automatic high temperature material processing in a orbital space station in micro-gravitation environment is presented in this paper. The scientific facility consists of the multi-zone high temperature furnace with heating system, PWM controlled heating converters, the precise extra low speed vibration-less electric drives to make possible to manipulate the processed material samples during experiments, very precise temperature measurement module, telemetric channel, crew interface computer, free programmable central controller and several further units. Facility computer network nodes have many user tasks (processes) divided into many threads running in real time environment. Using preemptive real time operating system tends to have unacceptable high overhead therefore the system of table driven coroutines with low system resource requirement (overhead, stack space) was designed. Emphasis is given on the design of efficient, reliable and self documented scheduler-dispatcher of the user tasks with minimized overhead and easily extensible descriptors of table driven user finite state automata. Presented scheduler architecture is used in the distributed network control computer of newly designed facility (Advanced TITUS) intended to be placed in the ISS space station. It is advanced version of the proved software utilized in the distributed control computer of the TITUS scientific equipment which was successfully operated several years in the MIR orbital station especially during ESA missions EUROMIR.},
  affiliation     = {Czech Technical University in Prague, Faculty of Electrical Engineering, Technicka 2, 166 27 Prague 6, Czech Republic},
  art_number      = {4417219},
  author_keywords = {Measurement; Mechatronics; Real time processing; Software; Space},
  db              = {Scopus},
  document_type   = {Conference Paper},
  doi             = {10.1109/EPE.2007.4417219},
  journal         = {2007 European Conference on Power Electronics and Applications, EPE},
  source          = {Scopus},
  url             = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-51049091406&doi=10.1109%2fEPE.2007.4417219&partnerID=40&md5=50231f281f2419efddf4a253dc552647},
}

@Conference{Cohen2007,
  author        = {Cohen, M. and Ponte, T. and Rossetto, S. and Rodríguez, N.},
  title         = {Using coroutines for RPC in sensor networks},
  year          = {2007},
  note          = {cited By 5},
  abstract      = {This paper proposes a concurrency model which integrates the asynchronous and event-driven nature of wireless sensor networks with higher-level abstractions that provide a more familiar programming style for the developer. As a basis for this proposal, we designed and implemented a cooperative multitasking scheduler, based on coroutines, for the TinyOS operating system. We then used this scheduler to implement RPC-like interfaces that capture different communication patterns common in wireless sensor networks. This allows the programmer to work, when appropriate, with a synchronous style, while maintaining an asynchronous model at the message exchange level. © 2007 IEEE.},
  affiliation   = {Departamento de Informática, PUC-Rio, Rua Marques de Sao Vicente, 225, Gavea, Rio de Janeiro, RJ, 22453-900, Brazil},
  art_number    = {4228186},
  db            = {Scopus},
  document_type = {Conference Paper},
  doi           = {10.1109/IPDPS.2007.370458},
  journal       = {Proceedings - 21st International Parallel and Distributed Processing Symposium, IPDPS 2007; Abstracts and CD-ROM},
  source        = {Scopus},
  url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548749105&doi=10.1109%2fIPDPS.2007.370458&partnerID=40&md5=7266e484e4d1b8ca39259aea33222880},
}

@Comment{jabref-meta: databaseType:bibtex;}
