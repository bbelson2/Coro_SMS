@INPROCEEDINGS{8016226, 
author={A. Elsts and G. Oikonomou and X. Fafoutis and R. Piechocki}, 
booktitle={2017 Global Internet of Things Summit (GIoTS)}, 
title={Internet of Things for smart homes: Lessons learned from the SPHERE case study}, 
year={2017}, 
pages={1-6}, 
abstract={Building large-scale low-power Internet of Things (IoT) systems remains a challenge, as these systems have to meet the requirements of reliability, robustness, and energy-efficiency while running on resource-restricted microcontrollers without memory protection. In this paper we present the case study of IoT in SPHERE (Sensor Platform for HEalthcare in a Residential Environment), a project with the objective to develop a multipurpose, multi-modal sensor platform for monitoring people's health inside their homes. Atypically for academic projects, in 2017 the SPHERE software is going to be deployed in a 100-home study in volunteer homes, therefore it has to satisfy many real-world requirements. We discuss the requirements for IoT networking in this project, the IoT architecture (built on top of Contiki OS), software engineering challenges and lessons learned, as well as some of the general aspects that still make embedded low-power IoT software development difficult.}, 
keywords={Internet of Things;assisted living;power aware computing;sensors;software engineering;IoT;SPHERE case study;embedded low-power IoT software development;energy-efficiency;large-scale low-power Internet of Things systems;multipurpose multimodal sensor platform;real-world requirements;resource-restricted microcontrollers;sensor platform for healthcare in a residential environment;smart homes;software engineering challenges;volunteer homes;Hardware;IEEE 802.15 Standard;Logic gates;Protocols;Reliability;Servers;Software}, 
doi={10.1109/GIOTS.2017.8016226}, 
month={June},}
@INPROCEEDINGS{7972165, 
author={W. Pipatsakulroj and V. Visoottiviseth and R. Takano}, 
booktitle={2017 IEEE International Symposium on Local and Metropolitan Area Networks (LANMAN)}, 
title={muMQ: A lightweight and scalable MQTT broker}, 
year={2017}, 
pages={1-6}, 
abstract={A message broker is an imperative component in IoT systems, and it works as a gateway between IoT devices and application platforms. With the growth of IoT devices today, these systems can easily overwhelm message brokers unless the software can fully utilize hardware resources such as multi-core facility. This paper presents muMQ, a high-performance MQTT broker running on Commercial-Off-The-Shelf hardware. It tackles the challenge to improve the performance of message brokering on a single machine by efficiently utilizing multi-core CPUs. First, muMQ exploits an event-driven I/O mechanism for multi-core scalability. Each CPU core equally handles dispatched TCP connections and locally processes MQTT logic. Second, muMQ adopts a user-level TCP/IP stack, mTCP with DPDK, to avoid the overhead of the in-kernel TCP/IP stack, including system call overhead and resource contention. We evaluate the effectiveness of our approach through experiments. The results show that muMQ can handle 512K or greater long-lived subscribers with no message loss; muMQ achieves a publish messaging rate at 930K messages per second, which is 5.38 times faster than an existing MQTT broker. We also confirm mTCP accelerates the performance by 1.8 times compared with muMQ using the in-kernel TCP/IP stack.}, 
keywords={Internet of Things;multiprocessing systems;transport protocols;CPU core;Commercial-Off-The-Shelf hardware;DPDK;IoT devices;IoT systems;MQTT logic;application platforms;dispatched TCP connections;event-driven I/O mechanism;hardware resources;high-performance MQTT broker;in-kernel TCP/IP stack;mTCP;message brokering;muMQ;multicore CPU;multicore facility;multicore scalability;publish messaging rate;resource contention;scalable MQTT broker;single machine;user-level TCP/IP stack;Hardware;Kernel;Message systems;Multicore processing;Scalability;Sockets;TCPIP;MQTT;high performance computing;message broker;multi-core system;user-level TCP/IP stack}, 
doi={10.1109/LANMAN.2017.7972165}, 
month={June},}
@INPROCEEDINGS{7336328, 
author={D. Yunge and P. Kindt and M. Balszun and S. Chakraborty}, 
booktitle={2015 IEEE 17th International Conference on High Performance Computing and Communications, 2015 IEEE 7th International Symposium on Cyberspace Safety and Security, and 2015 IEEE 12th International Conference on Embedded Software and Systems}, 
title={Hybrid Apps: Apps for the Internet of Things}, 
year={2015}, 
pages={1175-1180}, 
abstract={Smartphones have become popular mainly because of the large variety of applications they can run. In contrast, most devices in the phone's environment - e.g., household appliances or environmental sensors - are much less flexible because their functionality is hardcoded at the design time. In order to realize the vision of the Internet of Things (IoT), where all devices communicate with each other to realize joint tasks, it is necessary that these devices are able to extend and adapt their functionalities on-the-fly based on their surrounding. To realize smart functionalities for IoT devices, we propose "hybrid Apps", the concept of Smartphone "Apps" applied to small embedded systems. In contrast with current packaged "smart home" solutions, where all appliances have to be changed to their smart counterparts at the same time, hybrid Apps permit an incremental and hence feasible deployment of the IoT vision. In this paper we discuss the challenges and opportunities associated with this approach. We argue code interpretation as a candidate reprogramming method for IoT devices and analyzed its feasibility with real-world measurements of key parameters such as computational and energy overhead. While in general, code interpretation incurs a large energy-overhead, we show that for typical IoT applications executed every few seconds, it is as low as 1%.}, 
keywords={Internet of Things;embedded systems;home computing;smart phones;Internet of Things;IoT applications;IoT devices;candidate reprogramming method;code interpretation;embedded systems;energy-overhead;hybrid apps;packaged smart home solutions;smartphone apps;Hardware;Java;Middleware;Protocols;Random access memory;Temperature sensors;Apps;Code Interpreter;Reprogrammability;Virtual Machines;Wireless Sensor Networks}, 
doi={10.1109/HPCC-CSS-ICESS.2015.292}, 
month={Aug},}
@INPROCEEDINGS{7983156, 
author={U. A. Noman and B. Negash and A. M. Rahmani and P. Liljeberg and H. Tenhunen}, 
booktitle={2017 14th IEEE Annual Consumer Communications Networking Conference (CCNC)}, 
title={From threads to events: Adapting a lightweight middleware for Contiki OS}, 
year={2017}, 
pages={486-491}, 
abstract={Interoperability is one of the key requirements in the Internet of Things considering the diverse platforms, communication standards and specifications available today. Inherent resource constraints in the majority of IoT devices makes it very difficult to use existing solutions for interoperability, thus demanding new approaches. This paper presents the process of adapting a lightweight interoperability middleware for IoT, LISA, from RIOT to Contiki OS and evaluates memory and power overheads. The middleware follows a service oriented architecture and classifies devices according to available resources to assign different roles, such as Application, Service and Manager Nodes. These roles live in different tiers in a generic IoT architecture, where the Manager nodes are located in the intermediate Fog layer. To adapt to an event based kernel of Contiki, the middleware defines and handles a set of events that are used to communicate with the user application. A network of nodes is simulated to show the architecture promoted by the middleware and the results are presented.}, 
keywords={Internet of Things;middleware;open systems;operating systems (computers);service-oriented architecture;Contiki OS;IoT architecture;IoT devices;LISA;RIOT;event based kernel;intermediate fog layer;lightweight interoperability middleware;manager nodes;memory overheads;power overheads;resource constraints;Internet of Things;Interoperability;Manganese;Message systems;Middleware;Protocols;Semantics;Contiki;Internet of Things;Interoperability;LISA}, 
doi={10.1109/CCNC.2017.7983156}, 
month={Jan},}
@INPROCEEDINGS{6926617, 
author={Ye Jihua and W. Wang}, 
booktitle={2014 9th International Conference on Computer Science Education}, 
title={Research and design of solar photovoltaic power generation monitoring system based on TinyOS}, 
year={2014}, 
pages={1020-1023}, 
abstract={In this paper, in order to solve management problems and field maintenance difficult issues existing in the process of PV power generation, we have designed a remote intelligent monitoring system based on TinyOS for monitoring and management. This system had implemented remote monitoring and reverse control by host computer, ARM gateways, wireless sensor networks and other components.}, 
keywords={microcontrollers;photovoltaic power systems;power system measurement;wireless sensor networks;ARM gateways;PV power generation;TinyOS;field maintenance;host computer;management problems;remote intelligent monitoring system;remote monitoring;reverse control;wireless sensor networks;Computers;Data analysis;Logic gates;Monitoring;Routing;Wireless communication;Wireless sensor networks;IOT;TinyOS;node;remote monitoring}, 
doi={10.1109/ICCSE.2014.6926617}, 
month={Aug},}
@INPROCEEDINGS{7117986, 
author={M. Pavlov and A. Petrov}, 
booktitle={2015 17th Conference of Open Innovations Association (FRUCT)}, 
title={Software architecture for scalable computing systems with automatic granularity selection of executable code}, 
year={2015}, 
pages={151-156}, 
abstract={The problem of developing software architecture and its platform implementation for scalable cloud services is addressed in the paper. New scheme of distributed software developing and executing is presented with argumentation and main principles behind solution. Performance evaluation of one of the platform components (data storage) is described.}, 
keywords={cloud computing;granular computing;software architecture;automatic granularity selection;data storage;distributed software development;distributed software execution;executable code;performance evaluation;scalable cloud services;scalable computing systems;software architecture;Computer architecture;Memory;Optimization;Runtime;Software;Software architecture;Virtual machining}, 
doi={10.1109/FRUCT.2015.7117986}, 
ISSN={2305-7254}, 
month={April},}
@ARTICLE{6472115, 
author={M. T. Lazarescu}, 
journal={IEEE Journal on Emerging and Selected Topics in Circuits and Systems}, 
title={Design of a WSN Platform for Long-Term Environmental Monitoring for IoT Applications}, 
year={2013}, 
volume={3}, 
number={1}, 
pages={45-54}, 
abstract={The Internet of Things (IoT) provides a virtual view, via the Internet Protocol, to a huge variety of real life objects, ranging from a car, to a teacup, to a building, to trees in a forest. Its appeal is the ubiquitous generalized access to the status and location of any “thing” we may be interested in. Wireless sensor networks (WSN) are well suited for long-term environmental data acquisition for IoT representation. This paper presents the functional design and implementation of a complete WSN platform that can be used for a range of long-term environmental monitoring IoT applications. The application requirements for low cost, high number of sensors, fast deployment, long lifetime, low maintenance, and high quality of service are considered in the specification and design of the platform and of all its components. Low-effort platform reuse is also considered starting from the specifications and at all design levels for a wide array of related monitoring applications.}, 
keywords={IP networks;Internet of Things;data acquisition;environmental monitoring (geophysics);environmental science computing;quality of service;sensor placement;telecommunication network reliability;wireless sensor networks;Internet Protocol;Internet-of-Things;IoT application;IoT representation;WSN platform;functional design;long-term environmental data acquisition;long-term environmental monitoring;network lifetime;quality of service;sensor deployment;ubiquitous generalized access;wireless sensor networks;Internet of Things (IoT);IoT applications;WSN optimized design;WSN platform;WSN protocol;long term environmental monitoring applications;wireless sensor networks (WSN)}, 
doi={10.1109/JETCAS.2013.2243032}, 
ISSN={2156-3357}, 
month={March},}
@INPROCEEDINGS{7383583, 
author={Z. Cheng and Y. Li and R. West}, 
booktitle={2015 IEEE Real-Time Systems Symposium}, 
title={Qduino: A Multithreaded Arduino System for Embedded Computing}, 
year={2015}, 
pages={261-272}, 
abstract={Arduino is an open source platform that offers a clear and simple environment for physical computing. It is now widely used in modern robotics and Internet of Things (IoT) applications, due in part to its low-cost, ease of programming, and rapid prototyping capabilities. Sensors and actuators can easily be connected to the analog and digital I/O pins of an Arduino device, which features an on-board microcontroller programmed using the Arduino API. The increasing complexity of physical computing applications has now led to a series of Arduino-compatible devices with faster processors, increased flash storage, larger memories and more complicated I/O architectures. The Intel Galileo, for example, is designed to support the Arduino API on top of a Linux system, code-named Clanton. However, the standard API is restricted to the capabilities found on less powerful devices, lacking support for multithreaded programs, or specification of real-time requirements. In this paper, we present Qduino, a system developed for Arduino compatible boards. Qduino provides an extended Arduino API which, while backward-compatible with the original API, supports real-time multithreaded sketches and event handling. Experiments show the performance gains of Qduino compared to Clanton Linux.}, 
keywords={Linux;application program interfaces;formal specification;multi-threading;public domain software;real-time systems;Arduino API;Arduino compatible boards;Arduino-compatible devices;Clanton;I/O architectures;Intel Galileo;Internet of Things applications;IoT applications;Linux system;Qduino;Quest real-time operating system;actuators;backward-compatibility;embedded computing;event handling;flash storage;multithreaded Arduino system;multithreaded programs;on-board microcontroller;open source platform;physical computing applications;programming;rapid prototyping capabilities;real-time multithreaded sketches;real-time requirement specification;robotics;sensors;Computer architecture;Hardware;Instruction sets;Kernel;Linux;Real-time systems;Standards;Arduino;embedded systems;multi-threading;real-time}, 
doi={10.1109/RTSS.2015.32}, 
ISSN={1052-8725}, 
month={Dec},}
@INPROCEEDINGS{7774446, 
author={J. O. Ooi and F. A. B. Hussin and N. Zakaria}, 
booktitle={2016 IEEE 10th International Symposium on Embedded Multicore/Many-core Systems-on-Chip (MCSOC)}, 
title={Dual-Engine Cross-ISA DBTO Technique Utilising MultiThreaded Support for Multicore Processor System}, 
year={2016}, 
pages={257-264}, 
abstract={The emergence of new era of Internet of Things or IoT have encouraged intensive if not extensive usage of modern mobile apps, thus multi-ISA equipped multicore processor gain great potential to be used for more efficient instruction binary processing in near future. In order to support this ISA diversity of computing platforms, mix modes of statically and dynamically Binary Translation and Optimization system, popularly consists of QEMU and LLVM or similar system, is the default technique used. However this complex system exhibits heavy slowdown (60x slowdown as compare to generic QEMU) [21] which impede its performance especially for short running application codes, typically used in IoT based apps applications. This research introduce a dual binary code translation engines to support apps based and kernel based application codes, through utilising multithreaded supported apart of original single thread supported binary translation processing in run-time. The dual engine consists of TCG generator from QEMU, and LLVM which include rich optimisations library. The evaluation through PARSEC-3.0 Benchmark shows our Hybrid DBTO system achieved performance improvement approaching 2.0x for apps based programs and 1.25x for kernel based programs, for x86 to X86-64 emulation. This technique possess great potential and serve as research based platform for future binary translation technique development, including adaptive method.}, 
keywords={Internet of Things;binary codes;mobile computing;multi-threading;multiprocessing systems;Internet of Things;IoT;LLVM;PARSEC-3.0 benchmark;QEMU;TCG generator;X86-64 emulation;apps based application codes;dual binary code translation engines;dual-engine cross-ISA DBTO technique;dynamically binary translation and optimization system;hybrid DBTO system;instruction binary processing;kernel based application codes;mobile apps;multiISA equipped multicore processor;multicore processor system;multithreaded support;optimisations library;short running application codes;statically binary translation and optimization system;Emulation;Instruction sets;Kernel;Multicore processing;Optimization;Registers;Virtual machining;Binary Optimization;Binary Translation;Multi-ISA processor;Multicores;Multitheraded}, 
doi={10.1109/MCSoC.2016.36}, 
month={Sept},}
@INPROCEEDINGS{5678449, 
author={T. Riedel and N. Fantana and A. Genaid and D. Yordanov and H. R. Schmidtke and M. Beigl}, 
booktitle={2010 Internet of Things (IOT)}, 
title={Using web service gateways and code generation for sustainable IoT system development}, 
year={2010}, 
pages={1-8}, 
abstract={Wireless Sensing and Radio Identification systems have undergone many innovations during the past years. This has led to short product lifetimes for both software and hardware compared to classical industries. However, especially industries dealing with long-term support of products, e.g. of industrial machinery, and product lifetime of 40+ years may especially profit from an Internet of Things. Motivated by a practical industrial servicing use case this paper shows how we hope to make equally sustainable IoT solutions by employing a model driven software development approach based on code generation for multi-protocol web service gateways.}, 
keywords={Web services;internetworking;program compilers;protocols;software engineering;sustainable development;Internet of things;IoT system;Web service gateways;code generation;industrial servicing;multi-protocol;radio identification systems;software development approach;sustainable development;Automata;Logic gates;Radiofrequency identification;Semantics;Unified modeling language;Web services;XML}, 
doi={10.1109/IOT.2010.5678449}, 
month={Nov},}
@INPROCEEDINGS{7460722, 
author={M. P. Andersen and G. Fierro and D. E. Culler}, 
booktitle={2016 15th ACM/IEEE International Conference on Information Processing in Sensor Networks (IPSN)}, 
title={System Design for a Synergistic, Low Power Mote/BLE Embedded Platform}, 
year={2016}, 
pages={1-12}, 
abstract={Modern IoT prototyping platforms fall short in terms of energy efficiency, connectivity and software programming practices. We present the design of a new hardware and software platform that addresses these shortcomings by bringing together Mobile, Wearable, Maker and Wireless Sensor Network technologies to enable rapid prototyping with a high degree of synergy and energy efficiency. This is achieved in part by leveraging the Memory Protection Unit on modern microcontrollers along with a novel syscall interface to provide kernel / user isolation and a clean concurrency model. Such a design allows a wide range of languages to be used for application development without significant adaptation. We demonstrate how careful choice of application language allows the naturally asynchronous nature of embedded programming to be expressed cleanly and powerfully. Finally we evaluate the platform in several integrated use cases, providing examples of the capabilities introduced by Synergy.}, 
keywords={concurrency (computers);embedded systems;microcontrollers;clean concurrency model;embedded programming;low power mote-BLE embedded platform;memory protection unit;microcontrollers;mobile network technologies;rapid prototyping;syscall interface;wearable technologies;wireless sensor network technologies;Hardware;IEEE 802.15 Standard;Microcontrollers;Software;Storms;Technological innovation;Wireless sensor networks}, 
doi={10.1109/IPSN.2016.7460722}, 
month={April},}
@INPROCEEDINGS{7562102, 
author={S. Thombre and R. Ul Islam and K. Andersson and M. S. Hossain}, 
booktitle={2016 IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, 
title={Performance analysis of an IP based protocol stack for WSNs}, 
year={2016}, 
pages={360-365}, 
abstract={Wireless sensor networks (WSNs) are the key enablers of the Internet of Things (IoT) paradigm. Traditionally, sensor network research has been to be unlike the internet, motivated by power and device constraints. The IETF 6LoWPAN draft standard changes this, defining how IPv6 packets can be efficiently transmitted over IEEE 802.15.4 radio links. Due to this 6LoWPAN technology, low power, low cost microcontrollers can be connected to the internet forming what is known as the Wireless embedded Internet. Another IETF recommendation, CoAP allows these devices to communicate interactively over the Internet. The integration of such tiny, ubiquitous electronic devices to the Internet enables interesting real-time applications. We evaluate the performance of a stack consisting of CoAP and 6LoWPAN over the IEEE 802.15.4 radio link using the Contiki OS and Cooja simulator, along with the CoAP framework Californium (Cf).}, 
keywords={IP networks;Internet of Things;Zigbee;access protocols;packet radio networks;wireless sensor networks;CoAP framework californium;Contiki OS;Cooja simulator;IEEE 802.15.4 radio links;IETF 6LoWPAN draft standard;IP based protocol stack;IPv6 packets;Internet of Things;IoT;WSN;performance analysis;ubiquitous electronic devices;wireless embedded Internet;wireless sensor networks;IEEE 802.15 Standard;IP networks;Internet of things;Protocols;Wireless sensor networks;6LoWPAN;Californium (Cf);CoAP;Contiki;Cooja}, 
doi={10.1109/INFCOMW.2016.7562102}, 
month={April},}
@INPROCEEDINGS{7471346, 
author={M. P. Andersen and G. Fierro and D. E. Culler}, 
booktitle={2016 IEEE First International Conference on Internet-of-Things Design and Implementation (IoTDI)}, 
title={Enabling Synergy in IoT: Platform to Service and Beyond}, 
year={2016}, 
pages={1-12}, 
abstract={To enable a prosperous Internet of Things, devices and services must be extensible and adapt to changes in the environment or user interaction patterns. These requirements manifest as a set of design principles for each of the layers in an IoT ecosystem, from hardware to cloud services. This paper gives concrete guidelines learned from building a full-stack Synergistic IoT platform.}, 
keywords={Internet of Things;wireless sensor networks;Internet of Things;IoT synergy;synergistic IoT platform;user interaction pattern;Complexity theory;Context;Hardware;IEEE 802.15 Standard;Metadata;Protocols;Software;Internet of Things;Sensor motes;Wireless sensor networks}, 
doi={10.1109/IoTDI.2015.45}, 
month={April},}
@ARTICLE{7387670, 
author={M. Amjad and M. Sharif and M. K. Afzal and S. W. Kim}, 
journal={IEEE Sensors Journal}, 
title={TinyOS-New Trends, Comparative Views, and Supported Sensing Applications: A Review}, 
year={2016}, 
volume={16}, 
number={9}, 
pages={2865-2889}, 
abstract={The wireless sensor network (WSN) is an interesting area for modern day research groups. Tiny sensor nodes are deployed in a diversity of environments but with limited resources. Scarce resources compel researchers to employ an operating system that requires limited memory and minimum power. Tiny operating system (TinyOS) is a widely used operating system for sensor nodes, which provides concurrency and flexibility while adhering to the constraints of scarce resources. Comparatively, TinyOS is considered to be the most robust, innovative, energy-efficient, and widely used operating system in sensor networks. This paper looks at the state-of-the-art TinyOS and the different dimensions of its design paradigm, programming model, execution model, scheduling algorithms, concurrency, memory management, hardware support platforms, and other features. The addition of different features in TinyOS makes it the operating system of choice for WSNs. Sensing nodes with TinyOS seem to show more flexibility in supporting diverse types of sensing applications.}, 
keywords={systems software;wireless sensor networks;Tiny operating system;concurrency;design paradigm;execution model;hardware support platforms;memory management;programming model;scheduling algorithms;sensor nodes;wireless sensor network;Adaptation models;Concurrent computing;Instruction sets;Operating systems;Programming;Sensors;Wireless sensor networks;Wireless sensor networks;energy efficiency;operating system;sensor nodes},
doi={10.1109/JSEN.2016.2519924}, 
ISSN={1530-437X}, 
month={May},}