@INPROCEEDINGS{6059016, 
author={R. Inam and J. Mäki-Turja and M. Sjödin and S. M. H. Ashjaei and S. Afshar}, 
booktitle={ETFA2011}, 
title={Support for hierarchical scheduling in FreeRTOS}, 
year={2011}, 
pages={1-10}, 
abstract={This paper presents the implementation of a Hierarchical Scheduling Framework (HSF) on an open source real-time operating system (FreeRTOS) to support the temporal isolation between a number of applications, on a single processor. The goal is to achieve predictable integration and reusability of independently developed components or applications. We present the initial results of the HSF implementation by running it on an AVR 32-bit board EVK1100. The paper addresses the fixed-priority preemptive scheduling at both global and local scheduling levels. It describes the detailed design of HSF with the emphasis of doing minimal changes to the underlying FreeRTOS kernel and keeping its API intact. Finally it provides (and compares) the results for the performance measures of idling and deferrable servers with respect to the overhead of the implementation.}, 
keywords={application program interfaces;object-oriented programming;operating system kernels;public domain software;real-time systems;scheduling;software reusability;API;AVR EVK1100;FreeRTOS kernel;application reusability;fixed-priority preemptive scheduling;global scheduling levels;hierarchical scheduling framework;independently developed component reusability;local scheduling levels;open source real-time operating system;predictable integration;single processor;temporal isolation;Job shop scheduling;Kernel;Processor scheduling;Real time systems;Schedules;Servers;fixed-priority scheduling;hierarchical scheduling framework;real-time systems}, 
doi={10.1109/ETFA.2011.6059016}, 
ISSN={1946-0740}, 
month={Sept},}
@INPROCEEDINGS{4624024, 
author={D. G. Kim and S. M. Lee and D. R. Shin}, 
booktitle={2008 Fourth International Conference on Networked Computing and Advanced Information Management}, 
title={Design of the Operating System Virtualization on L4 Microkernel}, 
year={2008}, 
volume={1}, 
pages={307-310}, 
abstract={The importance of the virtualization in embedded computing area is currently emerging. The virtualization can enhance system flexibility by enabling the concurrent execution of an application OS and a real-time OS (RTOS) on the same processor. L4 microkernel can be used as an efficient hypervisor which provides environment for operating systems virtualization. In order to run the application OSes on L4 microkernel, the application OSes should be adapted. The source code of Linux kernel can be readily accessed and modified. Hence, the Linux kernel is chosen as virtualized operating systems. In this paper, the architecture for virtualization of Linux kernel which is based on L4 microkernel is proposed.}, 
keywords={Linux;operating system kernels;virtual machines;L4 microkernel;Linux kernel virtualization;concurrent execution;embedded computing;hypervisor;operating system virtualization;real-time operating system;system flexibility;Application software;Application virtualization;Embedded computing;Kernel;Linux;Operating systems;Platform virtualization;Real time systems;Virtual machine monitors;Yarn}, 
doi={10.1109/NCM.2008.165}, 
month={Sept},}
@INPROCEEDINGS{6269627, 
author={J. F. Ferreira and G. He and S. Qin}, 
booktitle={2012 Sixth International Symposium on Theoretical Aspects of Software Engineering}, 
title={Automated Verification of the FreeRTOS Scheduler in HIP/SLEEK}, 
year={2012}, 
pages={51-58}, 
abstract={Automated verification of operating system kernels is a challenging problem, partly due to the use of shared mutable data structures. In this paper, we show how we can automatically verify memory safety and functional correctness of the task scheduler component of the FreeRTOS kernel using the verification system HIP/SLEEK. We show how some of HIP/SLEEK features like user-defined predicates and lemmas make the specifications highly expressive and the verification process viable. To the best of our knowledge, this is the first code-level verification of memory safety and functional correctness properties of the FreeRTOS scheduler. The outcome of our experiment confirms that HIP/SLEEK can indeed be used to verify code that is used in production. Moreover, since the properties that we verify are quite general, we envisage that the same approach can be adopted to verify the scheduler of other operating systems.}, 
keywords={data structures;formal verification;operating system kernels;scheduling;shared memory systems;FreeRTOS kernel;FreeRTOS scheduler;HIP-SLEEK verification system;automated operating system kernel verification;first code-level verification;functional correctness verification;memory safety verification;real-time operating systems;shared mutable data structures;task scheduler component;user-defined lemmas;user-defined predicates;Context;Data structures;Hip;Kernel;Safety;Shape;FreeRTOS;HIP/SLEEK;automated verification;embedded systems;operating systems;separation logic;task scheduler}, 
doi={10.1109/TASE.2012.45}, 
month={July},}